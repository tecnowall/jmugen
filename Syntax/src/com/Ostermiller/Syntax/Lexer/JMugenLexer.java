/* The following code was generated by JFlex 1.4.2 on 02/11/08 10:25 */

/* JMugenLexer.java is a generated file.  You probably want to
 * edit JMugenLexer.lex to make changes.  Use JFlex to generate it.
 * To generate JMugenLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main JMugenLexer.lex</code><br>
 * You will then have a file called JMugenLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.Ostermiller.Syntax.Lexer;

import java.io.*;

/** 
 * JMugenLexer is a Mugen lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  JMugenLexer shredder = new JMugenLexer(System.in);
 *  JMugenToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * The tokens returned should comply with the 
 * <A Href=http://java.sun.com/docs/books/jls/html/>Java 
 * Language Specification</A>.
 * @see JMugenToken
 */ 


public class JMugenLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  9,  0,  6,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 75, 17,  0,  5, 75, 78, 16, 68, 22, 75, 77, 72, 70, 19, 75, 
     3,  4, 56,  4,  4,  3,  3,  3,  2,  2, 76, 18, 74, 23, 73, 76, 
     0, 31, 48, 40,  1, 36, 49, 44, 53, 26, 51, 57, 29, 24, 28, 42, 
    46, 65, 50, 38, 33, 55, 59, 63, 34, 61, 67, 69,  7, 71, 75,  5, 
     0, 32, 13, 41, 20, 37, 14, 45, 54, 27, 52, 58, 30, 25, 12, 43, 
    47, 66, 11, 39, 15, 10, 60, 64, 35, 62, 21,  0, 79,  0, 76,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\2\3\7\1\1\4\1\5"+
    "\1\6\1\7\14\1\1\10\1\11\1\7\1\12\1\13"+
    "\6\7\5\0\1\2\34\0\1\14\1\0\2\4\3\0"+
    "\1\15\3\0\1\16\55\0\1\7\1\16\5\0\1\17"+
    "\1\0\1\17\2\16\1\17\33\0\1\14\1\0\2\16"+
    "\1\14\24\0\1\16\32\0\1\15\11\0\2\15\1\0"+
    "\1\15\2\20\1\16\1\20\12\0\1\21\4\0\1\22"+
    "\14\0\1\15\15\0\1\15\1\0\1\15\22\0\1\15"+
    "\131\0\1\21\15\0\1\15\16\0\1\15\41\0\1\21"+
    "\26\0\1\22\25\0\1\21\6\0\1\22\5\0\1\21"+
    "\14\0\1\15\21\0\1\15\26\0\1\15\10\0\1\15"+
    "\7\0\1\15\1\0\1\15\34\0\1\15\12\0\1\23"+
    "\7\0\1\21\15\0\1\20\44\0\1\20\13\0\1\22"+
    "\3\0\1\22\5\0\1\24\10\0\1\25\11\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[729];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\120\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0"+
    "\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\120\0\u0910"+
    "\0\u0960\0\120\0\120\0\u09b0\0\u0a00\0\120\0\u0a50\0\u0aa0"+
    "\0\u0af0\0\120\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u04b0\0\u0910"+
    "\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0"+
    "\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130"+
    "\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0"+
    "\0\u0410\0\u1400\0\u1450\0\120\0\u14a0\0\u14f0\0\u1540\0\u1590"+
    "\0\u15e0\0\u1630\0\u0140\0\u1680\0\u16d0\0\u1720\0\u0140\0\u1770"+
    "\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u1c70"+
    "\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0"+
    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170"+
    "\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0"+
    "\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580\0\u0b40\0\u25d0\0\u2620"+
    "\0\u2670\0\u26c0\0\u2710\0\120\0\u2760\0\u0140\0\u0d20\0\u27b0"+
    "\0\u0b40\0\u2800\0\u2850\0\u28a0\0\u28f0\0\u2940\0\u2990\0\u29e0"+
    "\0\u2a30\0\u2a80\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0\0\u2c10\0\u2c60"+
    "\0\u2cb0\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u2e40\0\u2e90\0\u2ee0"+
    "\0\u2f30\0\u2f80\0\u2fd0\0\u3020\0\u0140\0\u3070\0\u14a0\0\u30c0"+
    "\0\u0b40\0\u3110\0\u3160\0\u31b0\0\u3200\0\u3250\0\u32a0\0\u32f0"+
    "\0\u3340\0\u3390\0\u33e0\0\u3430\0\u3480\0\u34d0\0\u3520\0\u3570"+
    "\0\u35c0\0\u3610\0\u3660\0\u36b0\0\u3700\0\u3750\0\u37a0\0\u37f0"+
    "\0\u3840\0\u3890\0\u38e0\0\u3930\0\u3980\0\u39d0\0\u3a20\0\u3a70"+
    "\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0"+
    "\0\u3d40\0\u3d90\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20\0\u3f70"+
    "\0\u3fc0\0\u4010\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0"+
    "\0\u4240\0\u4290\0\u42e0\0\u4330\0\u4380\0\u43d0\0\120\0\u0140"+
    "\0\u24e0\0\u0b40\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560\0\u45b0"+
    "\0\u4600\0\u4650\0\u46a0\0\u46f0\0\u4740\0\u4790\0\u47e0\0\u4830"+
    "\0\u4880\0\u0140\0\u48d0\0\u4920\0\u4970\0\u49c0\0\u4a10\0\u4a60"+
    "\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0\0\u4c40\0\u4c90\0\u4ce0"+
    "\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u4e70\0\u4ec0\0\u4f10\0\u4f60"+
    "\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0\0\u5140\0\u5190\0\u51e0"+
    "\0\u5230\0\u5280\0\u52d0\0\u5320\0\u5370\0\u53c0\0\u5410\0\u5460"+
    "\0\u54b0\0\u5500\0\u5550\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0"+
    "\0\u5730\0\u5780\0\u57d0\0\u5820\0\u5870\0\u58c0\0\u5910\0\u5960"+
    "\0\u59b0\0\u5a00\0\u5a50\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u5be0"+
    "\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u5e60"+
    "\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u6040\0\u6090\0\u60e0"+
    "\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270\0\u62c0\0\u6310\0\u6360"+
    "\0\u63b0\0\u6400\0\u6450\0\u64a0\0\u64f0\0\u6540\0\u6590\0\u65e0"+
    "\0\u6630\0\u6680\0\u66d0\0\u6720\0\u6770\0\u67c0\0\u6810\0\u6860"+
    "\0\u68b0\0\u6900\0\u6950\0\u69a0\0\u69f0\0\u6a40\0\u6a90\0\u6ae0"+
    "\0\u6b30\0\u6b80\0\u6bd0\0\u6c20\0\u6c70\0\u6cc0\0\u6d10\0\u6d60"+
    "\0\u6db0\0\u6e00\0\u6e50\0\u6ea0\0\u6ef0\0\u6f40\0\u6f90\0\u6fe0"+
    "\0\u7030\0\u7080\0\u70d0\0\u7120\0\u7170\0\u71c0\0\u7210\0\u7260"+
    "\0\u72b0\0\u7300\0\u7350\0\u73a0\0\u73f0\0\u7440\0\u7490\0\u74e0"+
    "\0\u7530\0\u7580\0\u75d0\0\u7620\0\u7670\0\u76c0\0\u7710\0\u7760"+
    "\0\u77b0\0\u7800\0\u7850\0\u78a0\0\u78f0\0\u7940\0\u7990\0\u79e0"+
    "\0\u7a30\0\u7a80\0\u7ad0\0\u7b20\0\u7b70\0\u7bc0\0\u7c10\0\u7c60"+
    "\0\u7cb0\0\u7d00\0\u7d50\0\u7da0\0\u7df0\0\u7e40\0\u7e90\0\u7ee0"+
    "\0\u7f30\0\u7f80\0\u7fd0\0\u8020\0\u8070\0\u80c0\0\u8110\0\u8160"+
    "\0\u81b0\0\u8200\0\u8250\0\u82a0\0\u82f0\0\u8340\0\u8390\0\u83e0"+
    "\0\u8430\0\u8480\0\u84d0\0\u8520\0\u8570\0\u85c0\0\u8610\0\u8660"+
    "\0\u86b0\0\u8700\0\u8750\0\u87a0\0\u87f0\0\u8840\0\u8890\0\u88e0"+
    "\0\u8930\0\u8980\0\u89d0\0\u8a20\0\u8a70\0\u8ac0\0\u8b10\0\u8b60"+
    "\0\u8bb0\0\u8c00\0\u8c50\0\u8ca0\0\u8cf0\0\u8d40\0\u8d90\0\u8de0"+
    "\0\u8e30\0\u8e80\0\u8ed0\0\u8f20\0\u8f70\0\u8fc0\0\u9010\0\u9060"+
    "\0\u90b0\0\u9100\0\u9150\0\u7800\0\u91a0\0\u91f0\0\u9240\0\u9290"+
    "\0\u92e0\0\u9330\0\u9380\0\u93d0\0\u9420\0\u9470\0\u94c0\0\u9510"+
    "\0\u9560\0\u95b0\0\u9600\0\u4740\0\u9650\0\u96a0\0\u96f0\0\u9740"+
    "\0\u9790\0\u97e0\0\u9830\0\u9880\0\u0140\0\u98d0\0\u9920\0\u9970"+
    "\0\u99c0\0\u9a10\0\u9a60\0\u9ab0\0\u9b00\0\u9b50\0\u9ba0\0\u9bf0"+
    "\0\u9c40\0\u9c90\0\u9ce0\0\u9d30\0\u9d80\0\u9dd0\0\u9e20\0\u9e70"+
    "\0\u9ec0\0\u9f10\0\u9f60\0\u9fb0\0\ua000\0\ua050\0\ua0a0\0\ua0f0"+
    "\0\ua140\0\ua190\0\ua1e0\0\ua230\0\ua280\0\ua2d0\0\ua320\0\ua370"+
    "\0\ua3c0\0\ua410\0\ua460\0\ua4b0\0\ua500\0\ua550\0\ua5a0\0\ua5f0"+
    "\0\ua640\0\ua690\0\ua6e0\0\ua730\0\ua780\0\ua7d0\0\ua820\0\ua870"+
    "\0\ua8c0\0\ua910\0\u9a60\0\ua960\0\ua9b0\0\uaa00\0\uaa50\0\uaaa0"+
    "\0\uaaf0\0\uab40\0\uab90\0\uabe0\0\uac30\0\uac80\0\uacd0\0\uad20"+
    "\0\uad70\0\uadc0\0\uae10\0\uae60\0\uaeb0\0\uaf00\0\uaf50\0\uafa0"+
    "\0\uaff0\0\ub040\0\ub090\0\ub0e0\0\ub130\0\ub180\0\ub1d0\0\ub220"+
    "\0\ub270\0\ub2c0\0\ub310\0\ub360\0\ub3b0\0\ub400\0\ub450\0\ub4a0"+
    "\0\ub4f0\0\ub540\0\ub590\0\ub5e0\0\ub630\0\ub680\0\ub6d0\0\ub720"+
    "\0\ub770\0\ub7c0\0\ub810\0\ub860\0\ub8b0\0\ub900\0\ub950\0\ub9a0"+
    "\0\ub9f0\0\uba40\0\uba90\0\ubae0\0\ubb30\0\u0140\0\ubb80\0\ubbd0"+
    "\0\ubc20\0\ubc70\0\ubcc0\0\ubd10\0\ubd60\0\uba40\0\ubdb0\0\ube00"+
    "\0\ube50\0\ubea0\0\ubef0\0\ubf40\0\uabe0\0\ubf90\0\u5780\0\ubfe0"+
    "\0\uc030\0\uc080\0\uc0d0\0\uc0d0\0\uc120\0\uc170\0\uc1c0\0\uc210"+
    "\0\uc260\0\uc2b0\0\uc300\0\uc350\0\uc3a0\0\uc3f0\0\uc440\0\uc490"+
    "\0\uc4e0\0\uc530\0\u50f0\0\uc580\0\uc5d0\0\uc620\0\uc670\0\uc6c0"+
    "\0\uc710\0\uc760\0\uc7b0\0\uc800\0\uc850\0\uc8a0\0\uc8f0\0\uc940"+
    "\0\uc990\0\uc9e0\0\uca30\0\uca80\0\ucad0\0\ucb20\0\ucb70\0\ucbc0"+
    "\0\ucbc0\0\ucc10\0\ucc60\0\uccb0\0\ucd00\0\ucd50\0\ucda0\0\ucdf0"+
    "\0\uce40\0\uce90\0\ucee0\0\ucf30\0\ucf80\0\ucfd0\0\ucf80\0\ud020"+
    "\0\ud070\0\ud0c0\0\ud110\0\ud160\0\ud1b0\0\ud200\0\ucbc0\0\ud250"+
    "\0\ud2a0\0\ud2f0\0\ud340\0\ud390\0\ud3e0\0\ud430\0\ud480\0\u0140"+
    "\0\ud4d0\0\ud520\0\ud570\0\ud5c0\0\ud610\0\ud660\0\ud6b0\0\ud700"+
    "\0\ud750";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[729];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\5\1\6\1\2\2\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\1\20\1\3\1\5\1\21\1\22\2\23\2\24\1\12"+
    "\2\25\2\26\1\15\2\5\2\27\2\30\2\31\2\5"+
    "\2\32\2\33\1\13\1\14\1\11\2\5\2\34\1\10"+
    "\1\4\2\5\2\35\2\5\2\36\3\5\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\22\1\46\1\47"+
    "\1\50\1\51\1\52\1\0\3\52\1\0\4\52\6\0"+
    "\4\52\2\0\2\52\14\0\2\53\22\0\1\52\13\0"+
    "\14\52\13\0\1\54\16\0\2\55\10\0\2\56\14\0"+
    "\1\54\35\0\1\52\1\0\3\4\1\0\4\52\6\0"+
    "\3\52\1\57\2\0\2\52\14\0\2\53\22\0\1\4"+
    "\13\0\14\52\120\0\1\52\1\0\3\52\1\0\1\6"+
    "\1\52\2\6\6\0\4\52\2\0\2\52\14\0\2\53"+
    "\22\0\1\52\13\0\1\52\1\60\13\52\1\0\3\61"+
    "\1\0\1\7\1\52\2\7\6\62\3\52\1\61\2\62"+
    "\1\61\1\52\1\0\1\62\1\0\1\62\2\0\1\62"+
    "\1\0\1\62\2\0\1\62\1\53\1\63\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\4\0\1\62\1\0\1\62\1\0\1\61\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\61\1\60\12\52\14\0\1\64\17\0\1\64"+
    "\122\0\2\65\3\0\2\66\4\0\2\67\56\0\1\70"+
    "\24\0\2\71\11\0\2\72\13\0\1\70\62\0\2\73"+
    "\3\0\2\74\3\0\2\75\6\0\2\76\55\0\1\77"+
    "\21\0\2\100\2\101\11\0\2\102\6\0\1\77\10\0"+
    "\2\103\35\0\1\104\1\105\16\0\2\106\3\0\2\107"+
    "\3\0\2\110\14\0\1\105\4\0\1\104\30\0\1\111"+
    "\1\112\3\111\1\112\1\111\1\113\2\52\6\112\1\111"+
    "\1\114\2\111\2\112\2\111\14\112\2\115\22\112\1\111"+
    "\13\112\14\111\1\17\1\116\3\17\1\116\3\17\1\52"+
    "\6\116\4\17\2\116\2\17\14\116\2\117\22\116\1\17"+
    "\13\116\14\17\1\52\1\0\3\57\1\0\4\52\6\0"+
    "\4\52\2\0\2\52\14\0\2\53\22\0\1\57\13\0"+
    "\15\52\1\0\3\52\1\0\4\52\6\0\4\52\2\0"+
    "\1\52\1\46\14\0\2\53\22\0\1\52\13\0\14\52"+
    "\32\0\2\120\3\0\2\121\11\0\2\122\45\0\1\123"+
    "\12\0\1\124\1\0\1\125\5\0\1\123\7\0\1\124"+
    "\11\0\2\126\11\0\1\125\52\0\1\127\15\0\2\130"+
    "\1\127\15\0\2\131\56\0\1\132\1\0\1\133\1\134"+
    "\1\135\1\136\14\0\1\133\2\137\2\0\1\136\4\0"+
    "\2\140\2\141\4\0\2\142\1\134\1\135\5\0\1\132"+
    "\44\0\1\143\17\0\1\143\5\0\2\144\66\0\1\145"+
    "\1\0\1\146\2\0\1\147\12\0\2\120\1\146\4\0"+
    "\1\147\2\0\2\150\2\0\2\151\4\0\2\152\7\0"+
    "\1\145\5\0\2\153\40\0\1\154\15\0\2\155\2\156"+
    "\1\154\2\0\2\157\4\0\2\160\11\0\2\161\44\0"+
    "\1\162\23\0\2\163\3\0\2\164\14\0\1\162\41\0"+
    "\1\165\6\0\1\166\16\0\2\127\1\0\2\167\2\170"+
    "\11\0\2\171\6\0\1\166\2\0\2\172\1\0\1\173"+
    "\61\0\2\174\10\0\2\175\111\0\2\176\3\0\2\177"+
    "\104\0\2\200\64\0\1\201\1\202\3\201\1\202\4\201"+
    "\6\202\4\201\2\202\2\201\14\202\2\203\2\204\20\202"+
    "\1\201\13\202\1\201\1\52\1\201\1\52\10\201\1\52"+
    "\1\0\3\52\1\0\4\52\6\0\4\52\2\0\1\52"+
    "\1\46\14\0\2\53\22\0\1\52\13\0\2\52\1\46"+
    "\12\52\1\0\3\52\1\0\4\52\6\0\4\52\2\0"+
    "\1\52\1\46\14\0\2\53\22\0\1\52\13\0\5\52"+
    "\1\205\7\52\1\0\3\52\1\0\4\52\6\0\4\52"+
    "\2\0\1\52\1\46\14\0\2\53\22\0\1\52\13\0"+
    "\6\52\1\22\6\52\1\0\3\52\1\0\4\52\6\0"+
    "\4\52\2\0\1\52\1\46\14\0\2\53\22\0\1\52"+
    "\13\0\11\52\1\46\3\52\1\0\3\52\1\0\4\52"+
    "\6\0\4\52\2\0\1\52\1\46\14\0\2\53\22\0"+
    "\1\52\13\0\12\52\1\46\2\52\1\0\3\52\1\0"+
    "\4\52\6\0\4\52\2\0\1\52\1\46\14\0\2\53"+
    "\22\0\1\52\13\0\13\52\1\46\1\206\1\0\3\206"+
    "\1\0\4\206\6\0\4\206\2\0\2\206\40\0\1\206"+
    "\13\0\14\206\37\0\2\207\125\0\2\210\66\0\1\211"+
    "\27\0\2\212\11\0\1\211\36\0\1\52\1\0\3\61"+
    "\1\0\1\213\1\52\2\213\6\62\3\52\1\61\2\62"+
    "\1\61\1\214\1\0\1\62\1\0\1\62\2\0\1\62"+
    "\1\0\1\62\2\0\1\62\1\53\1\63\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\4\0\1\62\1\0\1\62\1\0\1\61\1\0\1\62"+
    "\1\0\1\62\1\0\1\62\1\0\1\62\1\0\1\62"+
    "\1\0\1\61\13\52\2\0\3\62\1\0\1\215\1\0"+
    "\2\215\6\62\3\0\4\62\1\216\1\0\1\62\1\0"+
    "\1\62\2\0\1\62\1\0\1\62\2\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\4\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\13\0\1\206\1\0"+
    "\3\217\1\0\1\220\1\206\2\220\6\62\3\206\1\217"+
    "\2\62\1\217\1\221\1\0\1\62\1\0\1\62\2\0"+
    "\1\62\1\0\1\62\2\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\4\0\1\62\1\0\1\62\1\0\1\217\1\0"+
    "\1\62\1\0\1\62\1\0\1\62\1\0\1\62\1\0"+
    "\1\62\1\0\1\217\13\206\32\0\2\222\100\0\1\223"+
    "\17\0\1\223\113\0\2\224\41\0\2\225\35\0\1\226"+
    "\37\0\2\227\13\0\1\226\60\0\2\230\3\0\2\231"+
    "\111\0\2\232\105\0\1\233\21\0\1\233\72\0\1\234"+
    "\17\0\1\234\133\0\2\235\105\0\2\236\135\0\2\237"+
    "\112\0\2\240\116\0\2\241\101\0\2\242\11\0\2\243"+
    "\61\0\1\244\46\0\1\244\74\0\2\245\72\0\1\246"+
    "\46\0\1\246\74\0\2\247\107\0\2\250\16\0\2\251"+
    "\61\0\1\252\1\127\17\0\1\127\25\0\1\252\74\0"+
    "\2\253\57\0\7\112\1\254\2\0\7\112\1\255\76\112"+
    "\1\52\1\0\1\52\2\111\1\0\1\52\1\111\2\52"+
    "\1\256\5\112\2\111\2\52\2\0\2\52\14\0\2\53"+
    "\22\0\1\111\13\0\14\52\1\257\1\112\3\257\1\112"+
    "\1\257\1\260\2\206\6\112\1\257\1\261\2\257\2\112"+
    "\2\257\40\112\1\257\13\112\14\257\11\116\1\0\106\116"+
    "\1\117\1\116\3\117\1\116\3\117\1\206\6\116\4\117"+
    "\2\116\2\117\40\116\1\117\13\116\14\117\14\0\1\127"+
    "\17\0\1\127\102\0\1\262\21\0\1\262\2\127\25\0"+
    "\2\263\26\0\1\264\22\0\1\264\46\0\2\265\77\0"+
    "\2\266\106\0\2\267\111\0\2\270\24\0\2\271\47\0"+
    "\1\272\42\0\1\272\104\0\2\273\4\0\2\127\61\0"+
    "\1\274\21\0\1\274\110\0\2\275\20\0\2\276\110\0"+
    "\2\127\67\0\1\277\21\0\1\277\75\0\1\300\17\0"+
    "\2\120\1\300\110\0\2\301\1\0\2\76\113\0\2\120"+
    "\12\0\2\302\122\0\2\134\122\0\2\303\104\0\2\304"+
    "\25\0\2\305\101\0\2\306\116\0\2\307\41\0\1\310"+
    "\22\0\1\310\132\0\2\311\11\0\2\312\101\0\2\313"+
    "\74\0\1\314\46\0\1\314\50\0\1\315\46\0\1\315"+
    "\103\0\2\316\63\0\1\317\46\0\1\317\101\0\2\320"+
    "\66\0\1\321\17\0\1\321\115\0\2\322\100\0\1\323"+
    "\13\0\2\324\2\0\1\323\11\0\2\127\107\0\2\325"+
    "\116\0\2\326\107\0\2\327\105\0\1\330\21\0\1\330"+
    "\72\0\1\331\17\0\1\331\115\0\2\332\10\0\2\333"+
    "\4\0\2\334\103\0\2\335\71\0\1\336\1\337\21\0"+
    "\2\340\23\0\1\337\4\0\1\336\76\0\2\341\27\0"+
    "\2\342\114\0\2\343\22\0\1\344\12\0\1\331\1\345"+
    "\6\0\1\344\3\0\2\346\2\0\1\331\2\347\7\0"+
    "\2\350\10\0\1\345\56\0\1\351\21\0\1\351\113\0"+
    "\2\352\74\0\1\353\46\0\1\353\72\0\2\354\62\0"+
    "\1\355\12\0\1\356\7\0\1\355\7\0\1\356\63\0"+
    "\1\201\1\202\3\201\1\202\4\201\6\202\4\201\2\202"+
    "\2\201\14\202\2\203\22\202\1\201\13\202\1\201\1\52"+
    "\1\201\1\357\10\201\105\202\1\0\1\202\1\360\10\202"+
    "\1\361\1\202\3\361\1\202\4\361\6\202\4\361\2\202"+
    "\2\361\40\202\1\361\13\202\1\361\1\206\1\361\1\362"+
    "\10\361\17\202\1\363\21\202\1\363\43\202\1\0\1\202"+
    "\1\360\10\202\1\52\1\0\3\52\1\0\4\52\6\0"+
    "\4\52\2\0\1\52\1\46\14\0\2\53\22\0\1\52"+
    "\13\0\5\52\1\22\6\52\77\0\2\364\75\0\2\365"+
    "\104\0\2\366\71\0\1\367\21\0\1\367\56\0\1\52"+
    "\1\0\3\52\1\0\1\213\1\52\2\213\6\0\4\52"+
    "\2\0\1\52\1\214\14\0\2\53\22\0\1\52\13\0"+
    "\14\52\6\0\1\215\1\0\2\215\15\0\1\216\70\0"+
    "\1\206\1\0\3\206\1\0\1\220\1\206\2\220\6\0"+
    "\4\206\2\0\1\206\1\221\40\0\1\206\13\0\14\206"+
    "\101\0\2\370\16\0\1\371\22\0\1\371\145\0\2\372"+
    "\110\0\2\373\66\0\1\374\17\0\1\374\102\0\1\375"+
    "\21\0\1\375\75\0\1\376\21\0\1\376\2\0\2\377"+
    "\10\0\2\u0100\5\0\2\u0101\66\0\2\u0102\125\0\2\123"+
    "\137\0\2\u0103\32\0\1\u0104\22\0\1\u0104\164\0\2\u0105"+
    "\41\0\1\u0106\17\0\1\u0106\122\0\2\u0107\73\0\1\u0108"+
    "\17\0\1\u0108\135\0\2\u0109\101\0\2\u010a\113\0\2\u010b"+
    "\114\0\2\u010c\16\0\2\u010d\61\0\1\123\46\0\1\123"+
    "\51\0\1\u0102\17\0\1\u0102\77\0\1\u010e\17\0\1\u010e"+
    "\127\0\2\u010f\143\0\2\u0110\101\0\2\u0111\72\0\2\u0112"+
    "\71\0\2\112\2\0\1\112\2\0\1\256\7\112\46\0"+
    "\1\112\30\0\4\u0113\10\0\2\u0113\5\0\1\u0113\12\0"+
    "\2\u0113\3\0\2\u0113\2\0\2\u0113\6\0\2\u0113\6\0"+
    "\1\u0113\27\0\1\206\1\0\1\206\2\257\1\0\1\206"+
    "\1\257\2\206\1\256\5\112\2\257\2\206\2\0\2\206"+
    "\40\0\1\257\13\0\14\206\50\0\2\u0114\112\0\2\u0115"+
    "\104\0\2\u0116\130\0\2\u0117\64\0\1\u0118\54\0\1\u0118"+
    "\65\0\2\u0119\127\0\2\u011a\114\0\2\u011b\4\0\2\u011c"+
    "\110\0\2\u011d\116\0\2\356\137\0\2\u011e\61\0\2\u011f"+
    "\123\0\2\u0120\125\0\2\u0121\111\0\2\u0122\152\0\2\232"+
    "\67\0\2\u0123\116\0\2\u0124\102\0\2\u0125\134\0\2\u0126"+
    "\2\u0127\103\0\2\u0128\125\0\2\u0129\130\0\2\u012a\57\0"+
    "\1\u012b\21\0\1\u012b\134\0\2\u012c\56\0\1\u012d\42\0"+
    "\1\u012d\102\0\2\u012e\104\0\2\u012f\22\0\2\u0130\56\0"+
    "\1\u0131\42\0\1\u0131\11\0\2\103\60\0\2\u0132\120\0"+
    "\2\u0133\72\0\1\u0134\46\0\1\u0134\72\0\2\127\127\0"+
    "\2\u0135\100\0\2\u0136\102\0\1\u0137\17\0\1\u0137\156\0"+
    "\2\u0138\67\0\2\u0139\137\0\2\u013a\70\0\2\71\73\0"+
    "\1\u013b\17\0\1\u013b\156\0\2\u013c\106\0\2\u013d\130\0"+
    "\2\u013e\67\0\2\u013f\67\0\1\u0140\21\0\1\u0140\2\0"+
    "\2\u0141\66\0\1\u0142\1\0\1\u0143\15\0\1\u0142\24\0"+
    "\1\u0143\54\0\1\u0144\20\0\2\u0145\5\0\2\u0146\11\0"+
    "\1\u0144\102\0\2\u0147\120\0\2\u0148\102\0\2\u0149\136\0"+
    "\2\u014a\116\0\2\u014b\76\0\2\u014c\103\0\1\u014d\21\0"+
    "\1\u014d\57\0\1\u014e\13\0\1\u014f\1\u0150\5\0\1\u014e"+
    "\12\0\2\u0145\5\0\2\u0151\2\u0152\2\u0153\2\0\2\u0154"+
    "\1\u014f\1\u0150\11\0\2\u0155\101\0\2\u0156\53\0\1\u0157"+
    "\23\0\2\u0145\5\0\2\u0146\12\0\1\u0157\65\0\2\u0158"+
    "\5\0\2\u0145\5\0\2\u0146\67\0\1\u0159\21\0\1\u0159"+
    "\147\0\2\u0142\25\0\37\202\2\u015a\44\202\1\0\1\202"+
    "\1\360\10\202\54\0\2\331\77\0\2\u015b\75\0\1\u015c"+
    "\17\0\1\u015c\76\0\1\u015d\46\0\1\u015d\122\0\2\u015e"+
    "\103\0\2\u015f\137\0\2\u0160\36\0\1\u0161\46\0\1\u0161"+
    "\36\0\1\u0162\22\0\1\u0162\74\0\1\344\22\0\1\344"+
    "\132\0\2\u0163\73\0\1\u0164\17\0\1\u0164\5\0\2\u0165"+
    "\67\0\1\u0166\23\0\2\u0167\21\0\1\u0166\101\0\2\u011b"+
    "\104\0\2\u0168\103\0\1\u0169\21\0\1\u0169\122\0\2\u016a"+
    "\104\0\2\u016b\121\0\2\u016c\100\0\1\u0105\21\0\1\u0105"+
    "\71\0\1\127\46\0\1\127\101\0\2\u016d\66\0\1\u016e"+
    "\17\0\1\u016e\122\0\2\u016f\123\0\2\u0170\120\0\2\u0102"+
    "\100\0\2\u0171\134\0\2\u0172\114\0\2\u0173\102\0\2\u0174"+
    "\14\0\2\u0175\51\0\4\u0176\10\0\2\u0176\5\0\1\u0176"+
    "\12\0\2\u0176\3\0\2\u0176\2\0\2\u0176\6\0\2\u0176"+
    "\6\0\1\u0176\114\0\2\u0177\32\0\1\u0178\22\0\1\u0178"+
    "\111\0\1\u0179\42\0\1\u0179\51\0\1\u017a\3\0\1\u017b"+
    "\21\0\1\u017b\6\0\2\u017c\2\0\2\u017d\4\0\1\u017a"+
    "\2\0\2\u017e\70\0\2\u017f\125\0\2\u0180\116\0\2\u0181"+
    "\105\0\2\u0182\111\0\2\u0183\125\0\2\u0145\5\0\2\u0146"+
    "\122\0\2\u0184\63\0\1\u0185\21\0\1\u0185\2\0\2\u0186"+
    "\116\0\2\u0187\65\0\1\u0188\46\0\1\u0188\105\0\2\u0189"+
    "\61\0\1\u018a\46\0\1\u018a\51\0\1\u018b\17\0\1\u018b"+
    "\160\0\2\u018c\106\0\2\u018d\103\0\2\u018e\116\0\2\u018f"+
    "\57\0\1\u0190\46\0\1\u0190\74\0\2\246\123\0\2\u0191"+
    "\120\0\2\u0192\107\0\2\u0193\5\0\2\u0194\114\0\2\u0195"+
    "\71\0\1\u0196\21\0\1\u0196\71\0\1\u0197\46\0\1\u0197"+
    "\130\0\2\103\71\0\2\u0146\63\0\1\u0198\46\0\1\u0198"+
    "\101\0\2\u0199\71\0\1\u019a\21\0\1\u019a\115\0\2\u019b"+
    "\133\0\2\u019c\74\0\2\u019d\103\0\1\u0185\10\0\2\u019e"+
    "\7\0\1\u0185\110\0\2\u019f\103\0\1\u0102\21\0\1\u0102"+
    "\124\0\2\u01a0\114\0\2\u01a1\2\0\2\u01a2\2\0\2\u01a3"+
    "\7\0\2\u01a4\75\0\2\u01a5\2\u0192\114\0\2\u0102\66\0"+
    "\1\u0156\17\0\1\u0156\77\0\1\u01a6\17\0\1\u01a6\135\0"+
    "\2\123\106\0\2\u0102\67\0\1\u01a7\46\0\1\u01a7\36\0"+
    "\1\u01a8\22\0\1\u01a8\137\0\2\u013b\65\0\1\u01a9\46\0"+
    "\1\u01a9\67\0\2\u01aa\132\0\2\u016f\51\0\1\u01ab\22\0"+
    "\1\u01ab\166\0\2\u01ac\41\0\1\232\42\0\1\232\75\0"+
    "\2\u01ad\123\0\2\u01ae\147\0\2\u0102\60\0\2\u01af\144\0"+
    "\2\u01b0\103\0\2\u01b1\137\0\2\u01b2\62\0\2\u01b3\123\0"+
    "\2\317\116\0\2\u01b4\111\0\2\u01b5\71\0\1\231\54\0"+
    "\1\231\115\0\2\u0102\31\0\17\202\1\u01b6\21\202\1\u01b6"+
    "\43\202\1\0\1\202\1\360\10\202\37\0\2\u01b7\127\0"+
    "\2\u01b8\120\0\2\u01b9\76\0\2\u01ba\114\0\2\123\132\0"+
    "\2\u01bb\120\0\2\u01bc\64\0\1\u0142\17\0\1\u0142\11\0"+
    "\2\u01bd\63\0\1\u01be\46\0\1\u01be\101\0\2\u01bf\130\0"+
    "\2\u01c0\112\0\2\u01c1\57\0\1\u01c2\46\0\1\u01c2\54\0"+
    "\1\u01c3\21\0\1\u01c3\130\0\2\u01c4\45\0\1\u01c5\22\0"+
    "\1\u01c5\107\0\1\u01c6\17\0\1\u01c6\101\0\1\u0143\42\0"+
    "\1\u0143\52\0\1\u01c7\17\0\1\u01c7\137\0\2\123\61\0"+
    "\1\123\21\0\1\123\74\0\1\u01c8\42\0\1\u01c8\110\0"+
    "\2\u01c9\122\0\2\u01ca\57\0\1\u01cb\21\0\1\u01cb\130\0"+
    "\2\u01cc\76\0\2\u01cc\65\0\4\u01cd\10\0\2\u01cd\5\0"+
    "\1\u01cd\12\0\2\u01cd\3\0\2\u01cd\2\0\2\u01cd\6\0"+
    "\2\u01cd\6\0\1\u01cd\43\0\1\u0142\17\0\1\u0142\15\0"+
    "\2\u01ce\56\0\1\u01cf\54\0\1\u01cf\125\0\2\u01bb\65\0"+
    "\2\u01d0\147\0\2\u01d1\73\0\2\u01d2\56\0\1\u01d3\54\0"+
    "\1\u01d3\62\0\2\u01d4\77\0\1\u01d5\46\0\1\u01d5\101\0"+
    "\2\127\116\0\2\u01d6\130\0\2\u01d7\104\0\2\u01d8\65\0"+
    "\1\165\46\0\1\165\67\0\2\71\121\0\2\u01d9\3\0"+
    "\2\344\55\0\1\u01da\22\0\1\u01da\3\0\2\u0158\5\0"+
    "\2\u0145\5\0\2\u0146\102\0\2\u01db\155\0\2\u01dc\44\0"+
    "\1\u01dd\21\0\1\u01dd\57\0\1\u01de\22\0\1\u01de\107\0"+
    "\1\u01df\17\0\1\u01df\122\0\2\u01e0\114\0\2\u01e1\62\0"+
    "\1\u01e2\22\0\1\u01e2\151\0\2\u01e3\54\0\1\u0142\2\0"+
    "\1\u01e4\14\0\1\u0142\4\0\1\u01e4\72\0\1\u01a8\17\0"+
    "\1\u01a8\77\0\1\u01e5\17\0\1\u01e5\102\0\1\u01e6\21\0"+
    "\1\u01e6\72\0\1\u01e7\17\0\1\u01e7\127\0\2\u01e8\104\0"+
    "\2\u01e9\134\0\2\u01ea\116\0\2\u01eb\54\0\1\u01ec\1\0"+
    "\2\u01ec\72\0\1\u01ed\27\0\1\u01ee\17\0\1\u01ee\127\0"+
    "\2\u01ef\71\0\1\u014f\21\0\1\u014f\115\0\2\u01f0\76\0"+
    "\1\u0131\21\0\1\u0131\75\0\1\u01f1\21\0\1\u01f1\126\0"+
    "\2\u01f2\105\0\2\u01f3\11\0\2\u01f4\56\0\1\u01f5\54\0"+
    "\1\u01f5\62\0\2\u01f6\77\0\1\u01f7\46\0\1\u01f7\54\0"+
    "\1\u01f8\21\0\1\u01f8\122\0\2\u01f9\53\0\1\u0102\22\0"+
    "\1\u0102\123\0\2\u01fa\5\0\2\u0145\5\0\2\u0146\120\0"+
    "\2\u01fb\143\0\2\u01fc\65\0\2\u01fd\71\0\1\u01fe\21\0"+
    "\1\u01fe\74\0\1\u01ff\42\0\1\u01ff\73\0\2\u0200\120\0"+
    "\2\u0201\71\0\1\u0202\54\0\1\u0202\74\0\2\u0203\64\0"+
    "\1\u0204\54\0\1\u0204\43\0\1\u0205\46\0\1\u0205\51\0"+
    "\1\u0206\17\0\1\u0206\63\0\44\202\2\u0207\37\202\1\0"+
    "\1\202\1\360\10\202\75\0\2\u0208\65\0\2\u0209\147\0"+
    "\2\u020a\40\0\1\u020b\21\0\1\u020b\122\0\2\u020c\111\0"+
    "\2\u020d\76\0\1\u020e\21\0\1\u020e\2\0\2\u020f\126\0"+
    "\2\u0210\72\0\2\u0211\123\0\2\u0171\144\0\2\u0212\52\0"+
    "\1\u0213\21\0\1\u0213\73\0\1\u014f\42\0\1\u014f\52\0"+
    "\1\u0214\3\0\1\u0215\21\0\1\u0215\14\0\2\u0216\2\0"+
    "\1\u0214\111\0\2\u0217\60\0\1\u0142\42\0\1\u0142\131\0"+
    "\2\u0218\67\0\2\u0219\53\0\1\123\22\0\1\123\137\0"+
    "\2\u021a\53\0\1\u021b\13\0\1\u021c\1\u021d\5\0\1\u021b"+
    "\10\0\2\u021e\7\0\2\u0194\6\0\2\u021f\1\u021c\1\u021d"+
    "\11\0\2\u0220\24\0\1\232\22\0\1\232\74\0\4\112"+
    "\10\0\2\112\5\0\1\112\12\0\2\112\3\0\2\112"+
    "\2\0\2\112\6\0\2\112\6\0\1\112\122\0\2\u01d7"+
    "\71\0\2\u013b\143\0\2\u0221\101\0\2\232\54\0\1\u0222"+
    "\17\0\1\u0222\122\0\2\u0223\76\0\1\u0224\21\0\1\u0224"+
    "\57\0\1\u01fc\22\0\1\u01fc\106\0\1\u0225\46\0\1\u0225"+
    "\101\0\2\245\71\0\1\u0226\21\0\1\u0226\122\0\2\u0227"+
    "\65\0\1\u0228\46\0\1\u0228\65\0\2\u0229\67\0\1\u022a"+
    "\22\0\1\u022a\3\0\2\u022b\134\0\2\u022c\67\0\1\u022d"+
    "\21\0\1\u022d\122\0\2\u022e\143\0\2\u013f\77\0\2\u022f"+
    "\61\0\1\u0230\42\0\1\u0230\76\0\2\u0231\111\0\2\71"+
    "\41\0\2\u0232\53\0\2\u0233\123\0\2\u0234\74\0\1\u0235"+
    "\40\0\2\u0236\1\u0235\54\0\1\u0237\42\0\1\u0237\111\0"+
    "\2\u0238\101\0\2\u0239\133\0\2\u01ce\45\0\4\u023a\5\0"+
    "\6\u023a\3\0\3\u023a\2\0\54\u023a\15\0\1\u023b\22\0"+
    "\1\u023b\132\0\2\u023c\5\0\2\u0194\6\0\2\u023d\131\0"+
    "\2\u023e\64\0\2\u023f\76\0\1\u0240\21\0\1\u0240\72\0"+
    "\1\u0241\17\0\1\u0241\77\0\1\u0242\17\0\1\u0242\122\0"+
    "\2\u0243\76\0\1\u0244\21\0\1\u0244\110\0\2\u0245\22\0"+
    "\2\u0246\41\0\1\344\22\0\1\344\46\0\2\u0247\67\0"+
    "\2\u0248\111\0\2\u0249\125\0\2\123\67\0\1\u017b\21\0"+
    "\1\u017b\122\0\2\u024a\111\0\2\u024b\114\0\2\u024c\152\0"+
    "\2\u024d\41\0\1\u016f\17\0\1\u016f\76\0\1\u024e\46\0"+
    "\1\u024e\103\0\2\u024f\51\0\1\u0250\22\0\1\u0250\27\0"+
    "\2\u0251\42\0\1\202\1\u0252\4\202\1\u0253\1\202\1\u0254"+
    "\1\u0253\12\202\1\u0252\60\202\1\0\1\202\1\360\10\202"+
    "\17\0\1\u0255\21\0\1\u0255\106\0\2\u022b\134\0\2\u0256"+
    "\120\0\2\u0152\110\0\2\u0257\111\0\2\u0258\120\0\2\u0259"+
    "\121\0\2\u025a\120\0\2\u016f\147\0\2\123\53\0\2\u01c9"+
    "\100\0\1\u01d7\17\0\1\u01d7\135\0\2\u025b\103\0\2\u025c"+
    "\116\0\2\u025d\123\0\2\u025e\120\0\2\u0126\114\0\2\u025f"+
    "\65\0\1\u0260\46\0\1\u0260\50\0\1\u0261\46\0\1\u0261"+
    "\67\0\2\u0192\123\0\2\u0262\111\0\2\u0263\136\0\2\u0264"+
    "\110\0\2\u0265\116\0\2\u0266\71\0\1\u0267\21\0\1\u0267"+
    "\71\0\1\u0268\46\0\1\u0268\50\0\1\u0251\46\0\1\u0251"+
    "\54\0\1\u0269\21\0\1\u0269\122\0\2\u026a\102\0\2\u026b"+
    "\125\0\2\u026c\116\0\2\u026d\111\0\2\u01cf\76\0\1\u026e"+
    "\54\0\1\u026e\106\0\2\u026f\112\0\2\u0198\103\0\2\u01b4"+
    "\72\0\1\u0102\46\0\1\u0102\67\0\2\u0270\76\0\1\336"+
    "\54\0\1\336\106\0\2\u0271\70\0\2\u0272\105\0\1\u013f"+
    "\21\0\1\u013f\130\0\2\u0273\116\0\2\u01fb\110\0\2\u0274"+
    "\65\0\1\u0138\46\0\1\u0138\67\0\2\u0275\65\0\4\u023a"+
    "\5\0\6\u023a\3\0\3\u023a\1\u0276\1\0\54\u023a\30\0"+
    "\1\u0277\17\0\1\u0277\122\0\2\231\123\0\2\u0278\71\0"+
    "\1\u0279\21\0\1\u0279\110\0\2\u027a\134\0\2\u027b\65\0"+
    "\1\u027c\21\0\1\u027c\71\0\1\u027d\46\0\1\u027d\54\0"+
    "\1\u0185\21\0\1\u0185\57\0\1\u027e\22\0\1\u027e\105\0"+
    "\1\u027f\54\0\1\u027f\67\0\2\u0280\104\0\1\u013f\55\0"+
    "\1\u013f\56\0\2\123\70\0\1\u0142\2\0\1\u017b\14\0"+
    "\1\u0142\4\0\1\u017b\75\0\1\u0281\21\0\1\u0281\57\0"+
    "\1\u0282\22\0\1\u0282\21\0\2\u0146\23\0\2\u0283\67\0"+
    "\2\u01eb\65\0\1\u0284\46\0\1\u0284\101\0\2\u0285\124\0"+
    "\2\u0286\110\0\2\u0287\52\0\44\202\2\u0288\37\202\1\0"+
    "\1\202\1\360\10\202\10\u0289\1\u028a\74\u0289\1\u028b\1\u0289"+
    "\1\u028c\20\u0289\1\u028a\1\u028d\73\u0289\1\u028b\1\u0289\1\u028c"+
    "\10\u0289\52\0\2\u028e\110\0\2\u028f\130\0\2\u0290\41\0"+
    "\1\u0291\22\0\1\u0291\112\0\1\232\21\0\1\232\110\0"+
    "\2\u0292\136\0\2\u013b\57\0\1\u0293\46\0\1\u0293\50\0"+
    "\1\u0294\46\0\1\u0294\36\0\1\344\13\0\1\345\6\0"+
    "\1\344\33\0\1\345\40\0\1\u0295\22\0\1\u0295\141\0"+
    "\2\u0296\122\0\2\u0297\114\0\2\u0298\64\0\1\u0299\42\0"+
    "\1\u0299\135\0\2\u029a\54\0\2\u029b\74\0\1\u029c\46\0"+
    "\1\u029c\74\0\2\u029d\60\0\1\u029e\22\0\1\u029e\141\0"+
    "\2\u029f\107\0\2\u015f\73\0\1\u0142\2\0\1\u0185\14\0"+
    "\1\u0142\4\0\1\u0185\155\0\2\u0102\73\0\2\u02a0\77\0"+
    "\2\u0287\125\0\2\u02a1\66\0\1\u02a2\17\0\1\u02a2\127\0"+
    "\2\u0132\116\0\2\u02a3\64\0\1\u0192\54\0\1\u0192\67\0"+
    "\2\u02a4\135\0\2\u02a5\72\0\2\u02a6\123\0\2\u02a7\123\0"+
    "\2\u02a8\107\0\2\u013f\125\0\2\u02a9\111\0\2\u02aa\60\0"+
    "\1\u02ab\22\0\1\u02ab\141\0\2\u0159\63\0\1\u029b\46\0"+
    "\1\u029b\54\0\1\245\21\0\1\245\115\0\2\u02ac\123\0"+
    "\2\231\104\0\2\u02ad\114\0\2\u0102\66\0\16\202\1\u02ae"+
    "\42\202\1\u02ae\23\202\1\0\1\202\1\360\10\202\11\u02af"+
    "\1\202\73\u02af\1\u02b0\1\u02af\1\u02b1\21\u02af\1\u0289\73\u02af"+
    "\1\u02b0\1\u02af\1\u02b1\10\u02af\11\u02b0\1\0\106\u02b0\10\u02af"+
    "\1\u02b2\1\u0289\73\u02af\1\u02b0\1\u02af\1\u02b1\10\u02af\46\0"+
    "\2\u02b3\2\u01ea\103\0\2\u02b4\116\0\2\u02b5\125\0\2\u02b4"+
    "\120\0\2\u02b6\124\0\2\u0146\106\0\2\332\67\0\1\u02b7"+
    "\42\0\1\u02b7\103\0\2\u02b8\130\0\2\u0102\72\0\2\u02b9"+
    "\130\0\2\u02ba\116\0\2\u02bb\120\0\2\u029e\120\0\2\u016f"+
    "\112\0\2\u01c9\130\0\2\u02bc\104\0\2\u02bd\122\0\2\u02be"+
    "\47\0\1\u02bf\22\0\1\u02bf\135\0\2\344\70\0\1\u0287"+
    "\17\0\1\u0287\100\0\1\u02c0\42\0\1\u02c0\67\0\2\u02c1"+
    "\102\0\1\u02c2\17\0\1\u02c2\77\0\1\u0142\17\0\1\u0142"+
    "\120\0\2\u0285\131\0\2\u01f6\112\0\2\u02c3\102\0\2\u02c4"+
    "\67\0\1\u013f\22\0\1\u013f\73\0\2\202\3\u02c5\1\202"+
    "\1\u02ae\1\202\2\u02ae\56\202\1\u02c5\14\202\1\0\1\u02c6"+
    "\1\360\5\202\1\u02c6\2\202\11\u02af\1\202\73\u02af\1\u02b0"+
    "\1\u02af\1\u02c7\10\u02af\11\u02b0\1\0\75\u02b0\1\u02c7\10\u02b0"+
    "\11\u02af\1\u0289\73\u02af\1\u02b0\1\u02af\1\u02c7\10\u02af\50\0"+
    "\2\u02c8\64\0\1\u0102\42\0\1\u0102\110\0\2\u01a8\63\0"+
    "\1\u029e\21\0\1\u029e\115\0\2\u02c9\127\0\2\u02ca\62\0"+
    "\1\u02cb\17\0\1\u02cb\122\0\2\u0145\72\0\1\u02ba\46\0"+
    "\1\u02ba\101\0\2\u02cc\71\0\1\u02cd\21\0\1\u02cd\110\0"+
    "\2\u023d\136\0\2\u02ce\134\0\1\u0102\61\0\2\u0286\65\0"+
    "\1\u0244\22\0\1\u0244\132\0\2\u02cf\57\0\2\202\3\u02c5"+
    "\63\202\1\u02c5\14\202\1\0\1\202\1\u02d0\12\202\3\u02c5"+
    "\63\202\1\u02c5\14\202\1\0\1\u02c6\1\360\5\202\1\u02c6"+
    "\2\202\13\0\1\u02d1\46\0\1\u02d1\105\0\2\u02d2\120\0"+
    "\2\u02d3\120\0\2\u0102\112\0\2\u02d4\100\0\2\u02d5\123\0"+
    "\2\u02d6\133\0\2\u013f\106\0\2\u02d7\143\0\2\u0102\41\0"+
    "\1\u01c9\17\0\1\u01c9\115\0\2\u02d8\114\0\2\u013f\101\0"+
    "\1\u01a8\46\0\1\u01a8\101\0\2\246\111\0\2\u02d9\114\0"+
    "\2\123\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\44\1\5\0\1\1\34\0\1\1"+
    "\1\0\2\1\3\0\1\11\3\0\1\11\55\0\2\1"+
    "\5\0\1\1\1\0\1\11\3\1\33\0\1\11\1\0"+
    "\3\1\24\0\1\1\32\0\1\1\11\0\2\1\1\0"+
    "\2\1\1\11\2\1\12\0\1\1\4\0\1\11\14\0"+
    "\1\1\15\0\1\1\1\0\1\1\22\0\1\1\131\0"+
    "\1\1\15\0\1\1\16\0\1\1\41\0\1\1\26\0"+
    "\1\1\25\0\1\1\6\0\1\1\5\0\1\11\14\0"+
    "\1\1\21\0\1\1\26\0\1\1\10\0\1\1\7\0"+
    "\1\1\1\0\1\1\34\0\1\1\12\0\1\11\7\0"+
    "\1\1\15\0\1\1\44\0\1\1\13\0\1\1\3\0"+
    "\1\1\5\0\1\1\10\0\1\11\11\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[729];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            JMugenLexer shredder = new JMugenLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != JMugenToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JMugenLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JMugenLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { lastToken = JMugenToken.WHITE_SPACE;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 22: break;
        case 10: 
          { lastToken = JMugenToken.SEPARATOR_RBRACKET;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 23: break;
        case 18: 
          { lastToken = JMugenToken.TYPE_STATECTRL;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 24: break;
        case 15: 
          { lastToken = JMugenToken.LEFT_KEY;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 25: break;
        case 19: 
          { lastToken = JMugenToken.CONST_SPRITE_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 26: break;
        case 5: 
          { lastToken = JMugenToken.SEPARATOR_PERIOD;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 27: break;
        case 16: 
          { lastToken = JMugenToken.SECTION;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 28: break;
        case 2: 
          { lastToken = JMugenToken.FLOAT_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 29: break;
        case 17: 
          { lastToken = JMugenToken.SPRITE_REDIRECT_REG;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 30: break;
        case 8: 
          { lastToken = JMugenToken.SEPARATOR_LPAREN;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 31: break;
        case 6: 
          { lastToken = JMugenToken.SEPARATOR_RPAREN;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 32: break;
        case 21: 
          { lastToken = JMugenToken.SECTION_STATEDEF;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 33: break;
        case 12: 
          { lastToken = JMugenToken.LITERAL_STRING;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 34: break;
        case 9: 
          { lastToken = JMugenToken.SEPARATOR_LBRACKET;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 35: break;
        case 4: 
          { lastToken = JMugenToken.COMMENT_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 36: break;
        case 14: 
          { lastToken = JMugenToken.TRIGGER_MATHS_FUNCTION_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 37: break;
        case 7: 
          { lastToken = JMugenToken.OPERATOR_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 38: break;
        case 11: 
          { lastToken = JMugenToken.SEPARATOR_COMMA;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 39: break;
        case 13: 
          { lastToken = JMugenToken.TRIGGER_FUNCTION_SPRITE_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 40: break;
        case 20: 
          { lastToken = JMugenToken.SECTION_STATECTRL;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 41: break;
        case 1: 
          { lastToken = JMugenToken.TEXT;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
