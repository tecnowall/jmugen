/* The following code was generated by JFlex 1.4.2 on 02/11/08 08:19 */

/* JMugenLexer.java is a generated file.  You probably want to
 * edit JMugenLexer.lex to make changes.  Use JFlex to generate it.
 * To generate JMugenLexer.java
 * Install <a href="http://jflex.de/">JFlex</a> v1.3.2 or later.
 * Once JFlex is in your classpath run<br>
 * <code>java JFlex.Main JMugenLexer.lex</code><br>
 * You will then have a file called JMugenLexer.java
 */

/*
 * This file is part of a <a href="http://ostermiller.org/syntax/">syntax
 * highlighting</a> package.
 * Copyright (C) 1999-2002 Stephen Ostermiller
 * http://ostermiller.org/contact.pl?regarding=Syntax+Highlighting
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * See COPYING.TXT for details.
 */

package com.Ostermiller.Syntax.Lexer;

import java.io.*;

/** 
 * JMugenLexer is a Mugen lexer.  Created with JFlex.  An example of how it is used:
 *  <CODE>
 *  <PRE>
 *  JMugenLexer shredder = new JMugenLexer(System.in);
 *  JMugenToken t;
 *  while ((t = shredder.getNextToken()) != null){
 *      System.out.println(t);
 *  }
 *  </PRE>
 *  </CODE>
 * The tokens returned should comply with the 
 * <A Href=http://java.sun.com/docs/books/jls/html/>Java 
 * Language Specification</A>.
 * @see JMugenToken
 */ 


public class JMugenLexer implements Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  9,  0,  6,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 74, 17,  0,  5, 74, 78, 16, 68, 22, 74, 76, 71, 77, 19, 74, 
     3,  4, 56,  4,  4,  3,  3,  3,  2,  2, 75, 18, 73, 23, 72, 75, 
     0, 31, 48, 40,  1, 36, 49, 44, 53, 26, 51, 57, 29, 24, 28, 42, 
    46, 65, 50, 38, 33, 55, 59, 63, 34, 61, 67, 69,  7, 70, 74,  5, 
     0, 32, 13, 41, 20, 37, 14, 45, 54, 27, 52, 58, 30, 25, 12, 43, 
    47, 66, 11, 39, 15, 10, 60, 64, 35, 62, 21,  0, 79,  0, 75,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\2\3\7\1\1\4\1\5"+
    "\1\6\1\7\14\1\1\10\1\11\1\12\1\13\7\7"+
    "\5\0\1\2\3\0\1\3\34\0\1\14\1\0\2\4"+
    "\3\0\1\15\3\0\1\16\51\0\1\7\1\16\4\0"+
    "\2\17\2\0\1\20\2\0\1\20\1\16\1\17\3\16"+
    "\1\20\34\0\1\14\1\0\2\16\1\14\24\0\1\16"+
    "\32\0\1\15\11\0\2\15\1\0\1\15\4\0\3\20"+
    "\6\0\1\21\4\0\1\22\14\0\1\15\15\0\1\15"+
    "\1\0\1\15\22\0\1\15\131\0\1\21\15\0\1\15"+
    "\16\0\1\15\41\0\1\21\26\0\1\22\25\0\1\21"+
    "\6\0\1\22\5\0\1\21\14\0\1\15\21\0\1\15"+
    "\26\0\1\15\10\0\1\15\7\0\1\15\1\0\1\15"+
    "\35\0\1\15\12\0\1\23\7\0\1\21\17\0\1\17"+
    "\44\0\1\17\11\0\1\22\3\0\1\22\6\0\1\24"+
    "\10\0\1\25\7\0\1\25\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[739];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u04b0"+
    "\0\120\0\u0500\0\u0550\0\u05a0\0\u05f0\0\u0640\0\u0690\0\u06e0"+
    "\0\u0730\0\u0780\0\u07d0\0\u0820\0\u0870\0\u08c0\0\120\0\120"+
    "\0\120\0\120\0\u0910\0\u0960\0\120\0\u09b0\0\u0a00\0\u0a50"+
    "\0\u0aa0\0\120\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u04b0\0\u0c30"+
    "\0\u0c80\0\u0cd0\0\u0d20\0\u0d70\0\u0dc0\0\u0e10\0\u0e60\0\u0eb0"+
    "\0\u0f00\0\u0f50\0\u0fa0\0\u0ff0\0\u1040\0\u1090\0\u10e0\0\u1130"+
    "\0\u1180\0\u11d0\0\u1220\0\u1270\0\u12c0\0\u1310\0\u1360\0\u13b0"+
    "\0\u1400\0\u1450\0\u14a0\0\u14f0\0\u0410\0\u1540\0\u1590\0\120"+
    "\0\u15e0\0\u1630\0\u1680\0\u16d0\0\u1720\0\u1770\0\u0140\0\u17c0"+
    "\0\u1810\0\u1860\0\u0140\0\u18b0\0\u1900\0\u1950\0\u19a0\0\u19f0"+
    "\0\u1a40\0\u1a90\0\u1ae0\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u1c70"+
    "\0\u1cc0\0\u1d10\0\u1d60\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0"+
    "\0\u1f40\0\u1f90\0\u1fe0\0\u2030\0\u2080\0\u20d0\0\u2120\0\u2170"+
    "\0\u21c0\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0"+
    "\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580\0\u0af0\0\u25d0\0\u2620"+
    "\0\u2670\0\u26c0\0\u0c30\0\u0c80\0\u2710\0\u2760\0\u0c30\0\u27b0"+
    "\0\u2800\0\u0c80\0\u0dc0\0\u0dc0\0\u0e10\0\u2850\0\u28a0\0\u0dc0"+
    "\0\u28f0\0\u2940\0\u2990\0\u29e0\0\u2a30\0\u2a80\0\u2ad0\0\u2b20"+
    "\0\u2b70\0\u2bc0\0\u2c10\0\u2c60\0\u2cb0\0\u2d00\0\u2d50\0\u2da0"+
    "\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30\0\u2f80\0\u2fd0\0\u3020"+
    "\0\u3070\0\u30c0\0\u3110\0\u3160\0\u0140\0\u31b0\0\u15e0\0\u3200"+
    "\0\u0af0\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0\0\u3430"+
    "\0\u3480\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0"+
    "\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u3890\0\u38e0\0\u3930"+
    "\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0"+
    "\0\u3c00\0\u3c50\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u3de0\0\u3e30"+
    "\0\u3e80\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0\0\u4010\0\u4060\0\u40b0"+
    "\0\u4100\0\u4150\0\u41a0\0\u41f0\0\u4240\0\u4290\0\u42e0\0\u4330"+
    "\0\u4380\0\u43d0\0\u4420\0\u4470\0\u44c0\0\u4510\0\u4560\0\u45b0"+
    "\0\u4600\0\u4650\0\120\0\u0140\0\u0af0\0\u46a0\0\u46f0\0\u4740"+
    "\0\u4790\0\u47e0\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970\0\u49c0"+
    "\0\u0140\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0"+
    "\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u4e70"+
    "\0\u4ec0\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u50f0"+
    "\0\u5140\0\u5190\0\u51e0\0\u5230\0\u5280\0\u52d0\0\u5320\0\u5370"+
    "\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u5500\0\u5550\0\u55a0\0\u55f0"+
    "\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780\0\u57d0\0\u5820\0\u5870"+
    "\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u5a00\0\u5a50\0\u5aa0\0\u5af0"+
    "\0\u5b40\0\u5b90\0\u5be0\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70"+
    "\0\u5dc0\0\u5e10\0\u5e60\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0"+
    "\0\u6040\0\u6090\0\u60e0\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270"+
    "\0\u62c0\0\u6310\0\u6360\0\u63b0\0\u6400\0\u6450\0\u64a0\0\u64f0"+
    "\0\u6540\0\u6590\0\u65e0\0\u6630\0\u6680\0\u66d0\0\u6720\0\u6770"+
    "\0\u67c0\0\u6810\0\u6860\0\u68b0\0\u6900\0\u6950\0\u69a0\0\u69f0"+
    "\0\u6a40\0\u6a90\0\u6ae0\0\u6b30\0\u6b80\0\u6bd0\0\u6c20\0\u6c70"+
    "\0\u6cc0\0\u6d10\0\u6d60\0\u6db0\0\u6e00\0\u6e50\0\u6ea0\0\u6ef0"+
    "\0\u6f40\0\u6f90\0\u6fe0\0\u7030\0\u7080\0\u70d0\0\u7120\0\u7170"+
    "\0\u71c0\0\u7210\0\u7260\0\u72b0\0\u7300\0\u7350\0\u73a0\0\u73f0"+
    "\0\u7440\0\u7490\0\u74e0\0\u7530\0\u7580\0\u75d0\0\u7620\0\u7670"+
    "\0\u76c0\0\u7710\0\u7760\0\u77b0\0\u7800\0\u7850\0\u78a0\0\u78f0"+
    "\0\u7940\0\u7990\0\u79e0\0\u7a30\0\u7a80\0\u7ad0\0\u7b20\0\u7b70"+
    "\0\u7bc0\0\u7c10\0\u7c60\0\u7cb0\0\u7d00\0\u7d50\0\u7da0\0\u7df0"+
    "\0\u7e40\0\u7e90\0\u7ee0\0\u7f30\0\u7f80\0\u7fd0\0\u8020\0\u8070"+
    "\0\u80c0\0\u8110\0\u8160\0\u81b0\0\u8200\0\u8250\0\u82a0\0\u82f0"+
    "\0\u8340\0\u8390\0\u83e0\0\u8430\0\u8480\0\u84d0\0\u8520\0\u8570"+
    "\0\u85c0\0\u8610\0\u8660\0\u86b0\0\u8700\0\u8750\0\u87a0\0\u87f0"+
    "\0\u8840\0\u8890\0\u88e0\0\u8930\0\u8980\0\u89d0\0\u8a20\0\u8a70"+
    "\0\u8ac0\0\u8b10\0\u8b60\0\u8bb0\0\u8c00\0\u8c50\0\u8ca0\0\u8cf0"+
    "\0\u8d40\0\u8d90\0\u8de0\0\u8e30\0\u8e80\0\u8ed0\0\u8f20\0\u8f70"+
    "\0\u8fc0\0\u9010\0\u9060\0\u90b0\0\u9100\0\u9150\0\u91a0\0\u91f0"+
    "\0\u9240\0\u9290\0\u7940\0\u92e0\0\u9330\0\u9380\0\u93d0\0\u9420"+
    "\0\u9470\0\u94c0\0\u9510\0\u9560\0\u95b0\0\u9600\0\u9650\0\u96a0"+
    "\0\u96f0\0\u9740\0\u4880\0\u9790\0\u97e0\0\u9830\0\u9880\0\u98d0"+
    "\0\u9920\0\u9970\0\u99c0\0\u0140\0\u9a10\0\u9a60\0\u9ab0\0\u9b00"+
    "\0\u9b50\0\u9ba0\0\u9bf0\0\u9c40\0\u9c90\0\u9ce0\0\u9d30\0\u9d80"+
    "\0\u9dd0\0\u9e20\0\u9e70\0\u9ec0\0\u9f10\0\u9f60\0\u9fb0\0\ua000"+
    "\0\ua050\0\ua0a0\0\ua0f0\0\ua140\0\ua190\0\ua1e0\0\ua230\0\ua280"+
    "\0\ua2d0\0\ua320\0\ua370\0\ua3c0\0\ua410\0\ua460\0\ua4b0\0\ua500"+
    "\0\ua550\0\ua5a0\0\ua5f0\0\ua640\0\ua690\0\ua6e0\0\ua730\0\ua780"+
    "\0\ua7d0\0\ua820\0\ua870\0\ua8c0\0\ua910\0\ua960\0\ua9b0\0\uaa00"+
    "\0\uaa50\0\u9ba0\0\uaaa0\0\uaaf0\0\uab40\0\uab90\0\uabe0\0\uac30"+
    "\0\uac80\0\uacd0\0\uad20\0\uad70\0\uadc0\0\uae10\0\uae60\0\uaeb0"+
    "\0\uaf00\0\uaf50\0\uafa0\0\uaff0\0\ub040\0\ub090\0\ub0e0\0\ub130"+
    "\0\ub180\0\ub1d0\0\ub220\0\ub270\0\ub2c0\0\ub310\0\ub360\0\ub3b0"+
    "\0\ub400\0\ub450\0\ub4a0\0\ub4f0\0\ub540\0\ub590\0\ub5e0\0\ub630"+
    "\0\ub680\0\ub6d0\0\ub720\0\ub770\0\ub7c0\0\ub810\0\ub860\0\ub8b0"+
    "\0\ub900\0\ub950\0\ub9a0\0\ub9f0\0\uba40\0\uba90\0\ubae0\0\ubb30"+
    "\0\ubb80\0\ubbd0\0\ubc20\0\ubc70\0\ubcc0\0\u0140\0\ubd10\0\ubd60"+
    "\0\ubdb0\0\ube00\0\ube50\0\ubea0\0\ubef0\0\ubbd0\0\ubf40\0\ubf90"+
    "\0\ubfe0\0\uc030\0\uc080\0\uc0d0\0\uad20\0\uc120\0\u58c0\0\uc170"+
    "\0\uc1c0\0\uc210\0\uc260\0\uc2b0\0\uc300\0\uc260\0\uc350\0\uc3a0"+
    "\0\uc3f0\0\uc440\0\uc490\0\uc4e0\0\uc530\0\uc580\0\uc5d0\0\uc620"+
    "\0\uc670\0\uc6c0\0\uc710\0\u5230\0\uc760\0\uc7b0\0\uc800\0\uc850"+
    "\0\uc8a0\0\uc8f0\0\uc940\0\uc990\0\uc9e0\0\uca30\0\uca80\0\ucad0"+
    "\0\ucb20\0\ucb70\0\ucbc0\0\ucc10\0\ucc60\0\uccb0\0\ucd00\0\ucd50"+
    "\0\ucda0\0\ucdf0\0\ucdf0\0\uce40\0\uce90\0\ucee0\0\ucf30\0\ucf80"+
    "\0\ucfd0\0\ud020\0\ud070\0\ud0c0\0\ud110\0\ud160\0\ud110\0\ud1b0"+
    "\0\ud200\0\ud250\0\ud2a0\0\ud2f0\0\ud340\0\ud390\0\ud3e0\0\ucdf0"+
    "\0\ud430\0\ud480\0\ud4d0\0\ud520\0\ud570\0\ud5c0\0\ud610\0\ud660"+
    "\0\u0c80\0\ud6b0\0\ud700\0\ud750\0\ud7a0\0\ud7f0\0\ud840\0\ud890"+
    "\0\u0140\0\ud8e0\0\ud930";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[739];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\5\1\6\1\2\2\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\17"+
    "\1\20\1\3\1\5\1\21\1\22\2\23\2\24\1\12"+
    "\2\25\2\26\1\15\2\5\2\27\2\30\2\31\2\5"+
    "\2\32\2\33\1\13\1\14\1\11\2\5\2\34\1\10"+
    "\1\4\2\5\2\35\2\5\2\36\3\5\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\22\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\0\3\52\1\0\4\52\6\0"+
    "\4\52\2\0\2\52\14\0\2\53\22\0\1\52\13\0"+
    "\14\52\13\0\1\54\16\0\2\55\10\0\2\56\14\0"+
    "\1\54\35\0\1\52\1\0\3\4\1\0\4\52\6\0"+
    "\3\52\1\57\2\0\2\52\14\0\2\53\22\0\1\4"+
    "\13\0\14\52\120\0\1\52\1\0\3\52\1\0\1\6"+
    "\1\52\2\6\6\0\4\52\2\0\2\52\14\0\2\53"+
    "\22\0\1\52\13\0\14\52\1\60\1\61\3\62\1\61"+
    "\1\63\1\60\1\63\1\7\6\64\3\60\1\62\2\64"+
    "\1\62\1\60\1\61\1\64\1\61\1\64\2\61\1\64"+
    "\1\61\1\64\2\61\1\64\1\65\1\66\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\4\61\1\64\1\61\1\64\1\61\1\62\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\62\1\67\12\60\14\0\1\70\17\0\1\70"+
    "\122\0\2\71\3\0\2\72\4\0\2\73\56\0\1\74"+
    "\24\0\2\75\11\0\2\76\13\0\1\74\62\0\2\77"+
    "\3\0\2\100\3\0\2\101\6\0\2\102\55\0\1\103"+
    "\21\0\2\104\2\105\11\0\2\106\6\0\1\103\10\0"+
    "\2\107\35\0\1\110\1\111\16\0\2\112\3\0\2\113"+
    "\3\0\2\114\14\0\1\111\4\0\1\110\30\0\1\115"+
    "\1\116\3\115\1\116\1\115\1\117\2\52\6\116\1\115"+
    "\1\120\2\115\2\116\2\115\14\116\2\121\22\116\1\115"+
    "\13\116\14\115\1\17\1\122\3\17\1\122\3\17\1\52"+
    "\6\122\4\17\2\122\2\17\14\122\2\123\22\122\1\17"+
    "\13\122\14\17\1\52\1\0\3\57\1\0\4\52\6\0"+
    "\4\52\2\0\2\52\14\0\2\53\22\0\1\57\13\0"+
    "\15\52\1\0\3\52\1\0\4\52\6\0\4\52\2\0"+
    "\1\52\1\45\14\0\2\53\22\0\1\52\13\0\14\52"+
    "\32\0\2\124\3\0\2\125\11\0\2\126\45\0\1\127"+
    "\12\0\1\130\1\0\1\131\5\0\1\127\7\0\1\130"+
    "\11\0\2\132\11\0\1\131\52\0\1\133\15\0\2\134"+
    "\1\133\15\0\2\135\56\0\1\136\1\0\1\137\1\140"+
    "\1\141\1\142\14\0\1\137\2\143\2\0\1\142\4\0"+
    "\2\144\2\145\4\0\2\146\1\140\1\141\5\0\1\136"+
    "\44\0\1\147\17\0\1\147\5\0\2\150\66\0\1\151"+
    "\1\0\1\152\2\0\1\153\12\0\2\124\1\152\4\0"+
    "\1\153\2\0\2\154\2\0\2\155\4\0\2\156\7\0"+
    "\1\151\5\0\2\157\40\0\1\160\15\0\2\161\2\162"+
    "\1\160\2\0\2\163\4\0\2\164\11\0\2\165\44\0"+
    "\1\166\23\0\2\167\3\0\2\170\14\0\1\166\41\0"+
    "\1\171\6\0\1\172\16\0\2\133\1\0\2\173\2\174"+
    "\11\0\2\175\6\0\1\172\2\0\2\176\1\0\1\177"+
    "\61\0\2\200\10\0\2\201\111\0\2\202\3\0\2\203"+
    "\104\0\2\204\64\0\1\52\1\0\3\52\1\0\4\52"+
    "\6\0\4\52\2\0\1\52\1\45\14\0\2\53\22\0"+
    "\1\52\13\0\4\52\1\205\10\52\1\0\3\52\1\0"+
    "\4\52\6\0\4\52\2\0\1\52\1\45\14\0\2\53"+
    "\22\0\1\52\13\0\5\52\1\22\7\52\1\0\3\52"+
    "\1\0\4\52\6\0\4\52\2\0\1\52\1\45\14\0"+
    "\2\53\22\0\1\52\13\0\10\52\1\45\4\52\1\0"+
    "\3\52\1\0\4\52\6\0\4\52\2\0\1\52\1\45"+
    "\14\0\2\53\22\0\1\52\13\0\11\52\1\45\3\52"+
    "\1\0\3\52\1\0\4\52\6\0\4\52\2\0\1\52"+
    "\1\45\14\0\2\53\22\0\1\52\13\0\12\52\1\45"+
    "\2\52\1\0\3\52\1\0\4\52\6\0\4\52\2\0"+
    "\1\52\1\45\14\0\2\53\22\0\1\52\13\0\13\52"+
    "\1\45\1\206\1\0\3\206\1\0\4\206\6\0\4\206"+
    "\2\0\2\206\40\0\1\206\13\0\14\206\37\0\2\207"+
    "\125\0\2\210\66\0\1\211\27\0\2\212\11\0\1\211"+
    "\36\0\1\60\1\61\3\60\1\61\3\60\1\52\6\61"+
    "\4\60\2\61\2\60\14\61\2\65\22\61\1\60\13\61"+
    "\2\60\1\213\11\60\11\61\1\0\74\61\1\214\11\61"+
    "\1\60\1\61\3\62\1\61\1\215\1\60\1\215\1\216"+
    "\6\64\3\60\1\62\2\64\1\62\1\217\1\61\1\64"+
    "\1\61\1\64\2\61\1\64\1\61\1\64\2\61\1\64"+
    "\1\65\1\66\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\4\61\1\64\1\61\1\64"+
    "\1\61\1\62\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\62\1\60\1\213"+
    "\12\60\1\61\3\62\1\61\1\63\1\60\1\63\1\7"+
    "\6\64\3\60\1\62\2\64\1\62\1\60\1\61\1\64"+
    "\1\61\1\64\2\61\1\64\1\61\1\64\2\61\1\64"+
    "\1\65\1\66\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\4\61\1\64\1\61\1\64"+
    "\1\61\1\62\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\62\1\67\1\213"+
    "\11\60\2\61\3\64\1\61\1\220\1\61\1\220\1\221"+
    "\6\64\3\61\4\64\1\222\1\61\1\64\1\61\1\64"+
    "\2\61\1\64\1\61\1\64\2\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\4\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\214\11\61\1\223"+
    "\1\61\3\223\1\61\3\223\1\206\6\61\4\223\2\61"+
    "\2\223\40\61\1\223\13\61\2\223\1\224\12\223\1\61"+
    "\3\225\1\61\1\226\1\223\1\226\1\227\6\64\3\223"+
    "\1\225\2\64\1\225\1\230\1\61\1\64\1\61\1\64"+
    "\2\61\1\64\1\61\1\64\2\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\4\61\1\64\1\61\1\64\1\61\1\225"+
    "\1\61\1\64\1\61\1\64\1\61\1\64\1\61\1\64"+
    "\1\61\1\64\1\61\1\225\1\223\1\224\11\223\1\60"+
    "\1\61\3\60\1\61\3\60\1\52\6\61\4\60\2\61"+
    "\2\60\14\61\2\65\2\231\20\61\1\60\13\61\2\60"+
    "\1\213\11\60\32\0\2\232\100\0\1\233\17\0\1\233"+
    "\113\0\2\234\41\0\2\235\35\0\1\236\37\0\2\237"+
    "\13\0\1\236\60\0\2\240\3\0\2\241\111\0\2\242"+
    "\105\0\1\243\21\0\1\243\72\0\1\244\17\0\1\244"+
    "\133\0\2\245\105\0\2\246\135\0\2\247\112\0\2\250"+
    "\116\0\2\251\101\0\2\252\11\0\2\253\61\0\1\254"+
    "\46\0\1\254\74\0\2\255\72\0\1\256\46\0\1\256"+
    "\74\0\2\257\107\0\2\260\16\0\2\261\61\0\1\262"+
    "\1\133\17\0\1\133\25\0\1\262\74\0\2\263\57\0"+
    "\7\116\1\264\2\0\7\116\1\265\76\116\1\52\1\0"+
    "\1\52\2\115\1\0\1\52\1\115\2\52\1\266\5\116"+
    "\2\115\2\52\2\0\2\52\14\0\2\53\22\0\1\115"+
    "\13\0\14\52\1\267\1\116\3\267\1\116\1\267\1\270"+
    "\2\206\6\116\1\267\1\271\2\267\2\116\2\267\40\116"+
    "\1\267\13\116\14\267\11\122\1\0\106\122\1\123\1\122"+
    "\3\123\1\122\3\123\1\206\6\122\4\123\2\122\2\123"+
    "\40\122\1\123\13\122\14\123\14\0\1\133\17\0\1\133"+
    "\102\0\1\272\21\0\1\272\2\133\25\0\2\273\26\0"+
    "\1\274\22\0\1\274\46\0\2\275\77\0\2\276\106\0"+
    "\2\277\111\0\2\300\24\0\2\301\47\0\1\302\42\0"+
    "\1\302\104\0\2\303\4\0\2\133\61\0\1\304\21\0"+
    "\1\304\110\0\2\305\20\0\2\306\110\0\2\133\67\0"+
    "\1\307\21\0\1\307\75\0\1\310\17\0\2\124\1\310"+
    "\110\0\2\311\1\0\2\102\113\0\2\124\12\0\2\312"+
    "\122\0\2\140\122\0\2\313\104\0\2\314\25\0\2\315"+
    "\101\0\2\316\116\0\2\317\41\0\1\320\22\0\1\320"+
    "\132\0\2\321\11\0\2\322\101\0\2\323\74\0\1\324"+
    "\46\0\1\324\50\0\1\325\46\0\1\325\103\0\2\326"+
    "\63\0\1\327\46\0\1\327\101\0\2\330\66\0\1\331"+
    "\17\0\1\331\115\0\2\332\100\0\1\333\13\0\2\334"+
    "\2\0\1\333\11\0\2\133\107\0\2\335\116\0\2\336"+
    "\107\0\2\337\105\0\1\340\21\0\1\340\72\0\1\341"+
    "\17\0\1\341\115\0\2\342\10\0\2\343\4\0\2\344"+
    "\103\0\2\345\71\0\1\346\1\347\21\0\2\350\23\0"+
    "\1\347\4\0\1\346\76\0\2\351\27\0\2\352\114\0"+
    "\2\353\22\0\1\354\12\0\1\341\1\355\6\0\1\354"+
    "\3\0\2\356\2\0\1\341\2\357\7\0\2\360\10\0"+
    "\1\355\56\0\1\361\21\0\1\361\113\0\2\362\74\0"+
    "\1\363\46\0\1\363\72\0\2\364\62\0\1\365\12\0"+
    "\1\366\7\0\1\365\7\0\1\366\63\0\1\52\1\0"+
    "\3\52\1\0\4\52\6\0\4\52\2\0\1\52\1\45"+
    "\14\0\2\53\22\0\1\52\13\0\4\52\1\22\7\52"+
    "\77\0\2\367\75\0\2\370\104\0\2\371\71\0\1\372"+
    "\21\0\1\372\56\0\1\60\1\61\3\60\1\61\1\215"+
    "\1\60\1\215\1\216\6\61\4\60\2\61\1\60\1\217"+
    "\14\61\2\65\22\61\1\60\13\61\2\60\1\213\11\60"+
    "\1\52\1\0\3\52\1\0\1\216\1\52\2\216\6\0"+
    "\4\52\2\0\1\52\1\373\14\0\2\53\22\0\1\52"+
    "\13\0\14\52\6\61\1\220\1\61\1\220\1\221\15\61"+
    "\1\222\56\61\1\214\11\61\6\0\1\221\1\0\2\221"+
    "\15\0\1\374\70\0\1\223\1\61\3\223\1\61\1\226"+
    "\1\223\1\226\1\227\6\61\4\223\2\61\1\223\1\230"+
    "\40\61\1\223\13\61\2\223\1\224\11\223\1\206\1\0"+
    "\3\206\1\0\1\227\1\206\2\227\6\0\4\206\2\0"+
    "\1\206\1\375\40\0\1\206\13\0\14\206\11\61\1\0"+
    "\5\61\1\376\21\61\1\376\44\61\1\214\11\61\101\0"+
    "\2\377\16\0\1\u0100\22\0\1\u0100\145\0\2\u0101\110\0"+
    "\2\u0102\66\0\1\u0103\17\0\1\u0103\102\0\1\u0104\21\0"+
    "\1\u0104\75\0\1\u0105\21\0\1\u0105\2\0\2\u0106\10\0"+
    "\2\u0107\5\0\2\u0108\66\0\2\u0109\125\0\2\127\137\0"+
    "\2\u010a\32\0\1\u010b\22\0\1\u010b\164\0\2\u010c\41\0"+
    "\1\u010d\17\0\1\u010d\122\0\2\u010e\73\0\1\u010f\17\0"+
    "\1\u010f\135\0\2\u0110\101\0\2\u0111\113\0\2\u0112\114\0"+
    "\2\u0113\16\0\2\u0114\61\0\1\127\46\0\1\127\51\0"+
    "\1\u0109\17\0\1\u0109\77\0\1\u0115\17\0\1\u0115\127\0"+
    "\2\u0116\143\0\2\u0117\101\0\2\u0118\72\0\2\u0119\71\0"+
    "\2\116\2\0\1\116\2\0\1\266\7\116\46\0\1\116"+
    "\30\0\4\u011a\10\0\2\u011a\5\0\1\u011a\12\0\2\u011a"+
    "\3\0\2\u011a\2\0\2\u011a\6\0\2\u011a\6\0\1\u011a"+
    "\27\0\1\206\1\0\1\206\2\267\1\0\1\206\1\267"+
    "\2\206\1\266\5\116\2\267\2\206\2\0\2\206\40\0"+
    "\1\267\13\0\14\206\50\0\2\u011b\112\0\2\u011c\104\0"+
    "\2\u011d\130\0\2\u011e\64\0\1\u011f\54\0\1\u011f\65\0"+
    "\2\u0120\127\0\2\u0121\114\0\2\u0122\4\0\2\u0123\110\0"+
    "\2\u0124\116\0\2\366\137\0\2\u0125\61\0\2\u0126\123\0"+
    "\2\u0127\125\0\2\u0128\111\0\2\u0129\152\0\2\242\67\0"+
    "\2\u012a\116\0\2\u012b\102\0\2\u012c\134\0\2\u012d\2\u012e"+
    "\103\0\2\u012f\125\0\2\u0130\130\0\2\u0131\57\0\1\u0132"+
    "\21\0\1\u0132\134\0\2\u0133\56\0\1\u0134\42\0\1\u0134"+
    "\102\0\2\u0135\104\0\2\u0136\22\0\2\u0137\56\0\1\u0138"+
    "\42\0\1\u0138\11\0\2\107\60\0\2\u0139\120\0\2\u013a"+
    "\72\0\1\u013b\46\0\1\u013b\72\0\2\133\127\0\2\u013c"+
    "\100\0\2\u013d\102\0\1\u013e\17\0\1\u013e\156\0\2\u013f"+
    "\67\0\2\u0140\137\0\2\u0141\70\0\2\75\73\0\1\u0142"+
    "\17\0\1\u0142\156\0\2\u0143\106\0\2\u0144\130\0\2\u0145"+
    "\67\0\2\u0146\67\0\1\u0147\21\0\1\u0147\2\0\2\u0148"+
    "\66\0\1\u0149\1\0\1\u014a\15\0\1\u0149\24\0\1\u014a"+
    "\54\0\1\u014b\20\0\2\u014c\5\0\2\u014d\11\0\1\u014b"+
    "\102\0\2\u014e\120\0\2\u014f\102\0\2\u0150\136\0\2\u0151"+
    "\116\0\2\u0152\76\0\2\u0153\103\0\1\u0154\21\0\1\u0154"+
    "\57\0\1\u0155\13\0\1\u0156\1\u0157\5\0\1\u0155\12\0"+
    "\2\u014c\5\0\2\u0158\2\u0159\2\u015a\2\0\2\u015b\1\u0156"+
    "\1\u0157\11\0\2\u015c\101\0\2\u015d\53\0\1\u015e\23\0"+
    "\2\u014c\5\0\2\u014d\12\0\1\u015e\65\0\2\u015f\5\0"+
    "\2\u014c\5\0\2\u014d\67\0\1\u0160\21\0\1\u0160\147\0"+
    "\2\u0149\101\0\2\341\77\0\2\u0161\75\0\1\u0162\17\0"+
    "\1\u0162\76\0\1\u0163\46\0\1\u0163\35\0\11\61\1\0"+
    "\25\61\2\u0164\45\61\1\214\11\61\65\0\2\u0165\103\0"+
    "\2\u0166\137\0\2\u0167\36\0\1\u0168\46\0\1\u0168\36\0"+
    "\1\u0169\22\0\1\u0169\74\0\1\354\22\0\1\354\132\0"+
    "\2\u016a\73\0\1\u016b\17\0\1\u016b\5\0\2\u016c\67\0"+
    "\1\u016d\23\0\2\u016e\21\0\1\u016d\101\0\2\u0122\104\0"+
    "\2\u016f\103\0\1\u0170\21\0\1\u0170\122\0\2\u0171\104\0"+
    "\2\u0172\121\0\2\u0173\100\0\1\u010c\21\0\1\u010c\71\0"+
    "\1\133\46\0\1\133\101\0\2\u0174\66\0\1\u0175\17\0"+
    "\1\u0175\122\0\2\u0176\123\0\2\u0177\120\0\2\u0109\100\0"+
    "\2\u0178\134\0\2\u0179\114\0\2\u017a\102\0\2\u017b\14\0"+
    "\2\u017c\51\0\4\u017d\10\0\2\u017d\5\0\1\u017d\12\0"+
    "\2\u017d\3\0\2\u017d\2\0\2\u017d\6\0\2\u017d\6\0"+
    "\1\u017d\114\0\2\u017e\32\0\1\u017f\22\0\1\u017f\111\0"+
    "\1\u0180\42\0\1\u0180\51\0\1\u0181\3\0\1\u0182\21\0"+
    "\1\u0182\6\0\2\u0183\2\0\2\u0184\4\0\1\u0181\2\0"+
    "\2\u0185\70\0\2\u0186\125\0\2\u0187\116\0\2\u0188\105\0"+
    "\2\u0189\111\0\2\u018a\125\0\2\u014c\5\0\2\u014d\122\0"+
    "\2\u018b\63\0\1\u018c\21\0\1\u018c\2\0\2\u018d\116\0"+
    "\2\u018e\65\0\1\u018f\46\0\1\u018f\105\0\2\u0190\61\0"+
    "\1\u0191\46\0\1\u0191\51\0\1\u0192\17\0\1\u0192\160\0"+
    "\2\u0193\106\0\2\u0194\103\0\2\u0195\116\0\2\u0196\57\0"+
    "\1\u0197\46\0\1\u0197\74\0\2\256\123\0\2\u0198\120\0"+
    "\2\u0199\107\0\2\u019a\5\0\2\u019b\114\0\2\u019c\71\0"+
    "\1\u019d\21\0\1\u019d\71\0\1\u019e\46\0\1\u019e\130\0"+
    "\2\107\71\0\2\u014d\63\0\1\u019f\46\0\1\u019f\101\0"+
    "\2\u01a0\71\0\1\u01a1\21\0\1\u01a1\115\0\2\u01a2\133\0"+
    "\2\u01a3\74\0\2\u01a4\103\0\1\u018c\10\0\2\u01a5\7\0"+
    "\1\u018c\110\0\2\u01a6\103\0\1\u0109\21\0\1\u0109\124\0"+
    "\2\u01a7\114\0\2\u01a8\2\0\2\u01a9\2\0\2\u01aa\7\0"+
    "\2\u01ab\75\0\2\u01ac\2\u0199\114\0\2\u0109\66\0\1\u015d"+
    "\17\0\1\u015d\77\0\1\u01ad\17\0\1\u01ad\135\0\2\127"+
    "\106\0\2\u0109\67\0\1\u01ae\46\0\1\u01ae\36\0\1\u01af"+
    "\22\0\1\u01af\137\0\2\u0142\65\0\1\u01b0\46\0\1\u01b0"+
    "\67\0\2\u01b1\132\0\2\u0176\51\0\1\u01b2\22\0\1\u01b2"+
    "\166\0\2\u01b3\41\0\1\242\42\0\1\242\75\0\2\u01b4"+
    "\123\0\2\u01b5\147\0\2\u0109\60\0\2\u01b6\144\0\2\u01b7"+
    "\103\0\2\u01b8\137\0\2\u01b9\62\0\2\u01ba\123\0\2\327"+
    "\116\0\2\u01bb\111\0\2\u01bc\71\0\1\241\54\0\1\241"+
    "\115\0\2\u0109\70\0\2\u01bd\127\0\2\u01be\120\0\2\u01bf"+
    "\44\0\11\61\1\0\5\61\1\u01c0\21\61\1\u01c0\44\61"+
    "\1\214\11\61\32\0\2\u01c1\114\0\2\127\132\0\2\u01c2"+
    "\120\0\2\u01c3\64\0\1\u0149\17\0\1\u0149\11\0\2\u01c4"+
    "\63\0\1\u01c5\46\0\1\u01c5\101\0\2\u01c6\130\0\2\u01c7"+
    "\112\0\2\u01c8\57\0\1\u01c9\46\0\1\u01c9\54\0\1\u01ca"+
    "\21\0\1\u01ca\130\0\2\u01cb\45\0\1\u01cc\22\0\1\u01cc"+
    "\107\0\1\u01cd\17\0\1\u01cd\101\0\1\u014a\42\0\1\u014a"+
    "\52\0\1\u01ce\17\0\1\u01ce\137\0\2\127\61\0\1\127"+
    "\21\0\1\127\74\0\1\u01cf\42\0\1\u01cf\110\0\2\u01d0"+
    "\122\0\2\u01d1\57\0\1\u01d2\21\0\1\u01d2\130\0\2\u01d3"+
    "\76\0\2\u01d3\65\0\4\u01d4\10\0\2\u01d4\5\0\1\u01d4"+
    "\12\0\2\u01d4\3\0\2\u01d4\2\0\2\u01d4\6\0\2\u01d4"+
    "\6\0\1\u01d4\43\0\1\u0149\17\0\1\u0149\15\0\2\u01d5"+
    "\56\0\1\u01d6\54\0\1\u01d6\125\0\2\u01c2\65\0\2\u01d7"+
    "\147\0\2\u01d8\73\0\2\u01d9\56\0\1\u01da\54\0\1\u01da"+
    "\62\0\2\u01db\77\0\1\u01dc\46\0\1\u01dc\101\0\2\133"+
    "\116\0\2\u01dd\130\0\2\u01de\104\0\2\u01df\65\0\1\171"+
    "\46\0\1\171\67\0\2\75\121\0\2\u01e0\3\0\2\354"+
    "\55\0\1\u01e1\22\0\1\u01e1\3\0\2\u015f\5\0\2\u014c"+
    "\5\0\2\u014d\102\0\2\u01e2\155\0\2\u01e3\44\0\1\u01e4"+
    "\21\0\1\u01e4\57\0\1\u01e5\22\0\1\u01e5\107\0\1\u01e6"+
    "\17\0\1\u01e6\122\0\2\u01e7\114\0\2\u01e8\62\0\1\u01e9"+
    "\22\0\1\u01e9\151\0\2\u01ea\54\0\1\u0149\2\0\1\u01eb"+
    "\14\0\1\u0149\4\0\1\u01eb\72\0\1\u01af\17\0\1\u01af"+
    "\77\0\1\u01ec\17\0\1\u01ec\102\0\1\u01ed\21\0\1\u01ed"+
    "\72\0\1\u01ee\17\0\1\u01ee\127\0\2\u01ef\104\0\2\u01f0"+
    "\134\0\2\u01f1\116\0\2\u01f2\54\0\1\u01f3\1\0\2\u01f3"+
    "\72\0\1\u01f4\27\0\1\u01f5\17\0\1\u01f5\127\0\2\u01f6"+
    "\71\0\1\u0156\21\0\1\u0156\115\0\2\u01f7\76\0\1\u0138"+
    "\21\0\1\u0138\75\0\1\u01f8\21\0\1\u01f8\126\0\2\u01f9"+
    "\105\0\2\u01fa\11\0\2\u01fb\56\0\1\u01fc\54\0\1\u01fc"+
    "\62\0\2\u01fd\77\0\1\u01fe\46\0\1\u01fe\54\0\1\u01ff"+
    "\21\0\1\u01ff\122\0\2\u0200\53\0\1\u0109\22\0\1\u0109"+
    "\123\0\2\u0201\5\0\2\u014c\5\0\2\u014d\120\0\2\u0202"+
    "\143\0\2\u0203\65\0\2\u0204\71\0\1\u0205\21\0\1\u0205"+
    "\74\0\1\u0206\42\0\1\u0206\73\0\2\u0207\120\0\2\u0208"+
    "\71\0\1\u0209\54\0\1\u0209\74\0\2\u020a\64\0\1\u020b"+
    "\54\0\1\u020b\43\0\1\u020c\46\0\1\u020c\51\0\1\u020d"+
    "\17\0\1\u020d\160\0\2\u020e\65\0\2\u020f\147\0\2\u0210"+
    "\21\0\11\61\1\0\32\61\2\u0211\40\61\1\214\11\61"+
    "\17\0\1\u0212\21\0\1\u0212\122\0\2\u0213\111\0\2\u0214"+
    "\76\0\1\u0215\21\0\1\u0215\2\0\2\u0216\126\0\2\u0217"+
    "\72\0\2\u0218\123\0\2\u0178\144\0\2\u0219\52\0\1\u021a"+
    "\21\0\1\u021a\73\0\1\u0156\42\0\1\u0156\52\0\1\u021b"+
    "\3\0\1\u021c\21\0\1\u021c\14\0\2\u021d\2\0\1\u021b"+
    "\111\0\2\u021e\60\0\1\u0149\42\0\1\u0149\131\0\2\u021f"+
    "\67\0\2\u0220\53\0\1\127\22\0\1\127\137\0\2\u0221"+
    "\53\0\1\u0222\13\0\1\u0223\1\u0224\5\0\1\u0222\10\0"+
    "\2\u0225\7\0\2\u019b\6\0\2\u0226\1\u0223\1\u0224\11\0"+
    "\2\u0227\24\0\1\242\22\0\1\242\74\0\4\116\10\0"+
    "\2\116\5\0\1\116\12\0\2\116\3\0\2\116\2\0"+
    "\2\116\6\0\2\116\6\0\1\116\122\0\2\u01de\71\0"+
    "\2\u0142\143\0\2\u0228\101\0\2\242\54\0\1\u0229\17\0"+
    "\1\u0229\122\0\2\u022a\76\0\1\u022b\21\0\1\u022b\57\0"+
    "\1\u0203\22\0\1\u0203\106\0\1\u022c\46\0\1\u022c\101\0"+
    "\2\255\71\0\1\u022d\21\0\1\u022d\122\0\2\u022e\65\0"+
    "\1\u022f\46\0\1\u022f\65\0\2\u0230\67\0\1\u0231\22\0"+
    "\1\u0231\3\0\2\u0232\134\0\2\u0233\67\0\1\u0234\21\0"+
    "\1\u0234\122\0\2\u0235\143\0\2\u0146\77\0\2\u0236\61\0"+
    "\1\u0237\42\0\1\u0237\76\0\2\u0238\111\0\2\75\41\0"+
    "\2\u0239\53\0\2\u023a\123\0\2\u023b\74\0\1\u023c\40\0"+
    "\2\u023d\1\u023c\54\0\1\u023e\42\0\1\u023e\111\0\2\u023f"+
    "\101\0\2\u0240\133\0\2\u01d5\45\0\4\u0241\5\0\6\u0241"+
    "\3\0\3\u0241\2\0\54\u0241\15\0\1\u0242\22\0\1\u0242"+
    "\132\0\2\u0243\5\0\2\u019b\6\0\2\u0244\131\0\2\u0245"+
    "\64\0\2\u0246\76\0\1\u0247\21\0\1\u0247\72\0\1\u0248"+
    "\17\0\1\u0248\77\0\1\u0249\17\0\1\u0249\122\0\2\u024a"+
    "\76\0\1\u024b\21\0\1\u024b\110\0\2\u024c\22\0\2\u024d"+
    "\41\0\1\354\22\0\1\354\46\0\2\u024e\67\0\2\u024f"+
    "\111\0\2\u0250\125\0\2\127\67\0\1\u0182\21\0\1\u0182"+
    "\122\0\2\u0251\111\0\2\u0252\114\0\2\u0253\152\0\2\u0254"+
    "\41\0\1\u0176\17\0\1\u0176\76\0\1\u0255\46\0\1\u0255"+
    "\103\0\2\u0256\51\0\1\u0257\22\0\1\u0257\27\0\2\u0258"+
    "\61\0\1\u0259\21\0\1\u0259\106\0\2\u0232\134\0\2\u025a"+
    "\50\0\1\61\1\u025b\4\61\1\u025c\1\61\1\u025d\1\u025e"+
    "\12\61\1\u025b\61\61\1\214\11\61\50\0\2\u0159\110\0"+
    "\2\u025f\111\0\2\u0260\120\0\2\u0261\121\0\2\u0262\120\0"+
    "\2\u0176\147\0\2\127\53\0\2\u01d0\100\0\1\u01de\17\0"+
    "\1\u01de\135\0\2\u0263\103\0\2\u0264\116\0\2\u0265\123\0"+
    "\2\u0266\120\0\2\u012d\114\0\2\u0267\65\0\1\u0268\46\0"+
    "\1\u0268\50\0\1\u0269\46\0\1\u0269\67\0\2\u0199\123\0"+
    "\2\u026a\111\0\2\u026b\136\0\2\u026c\110\0\2\u026d\116\0"+
    "\2\u026e\71\0\1\u026f\21\0\1\u026f\71\0\1\u0270\46\0"+
    "\1\u0270\50\0\1\u0258\46\0\1\u0258\54\0\1\u0271\21\0"+
    "\1\u0271\122\0\2\u0272\102\0\2\u0273\125\0\2\u0274\116\0"+
    "\2\u0275\111\0\2\u01d6\76\0\1\u0276\54\0\1\u0276\106\0"+
    "\2\u0277\112\0\2\u019f\103\0\2\u01bb\72\0\1\u0109\46\0"+
    "\1\u0109\67\0\2\u0278\76\0\1\346\54\0\1\346\106\0"+
    "\2\u0279\70\0\2\u027a\105\0\1\u0146\21\0\1\u0146\130\0"+
    "\2\u027b\116\0\2\u0202\110\0\2\u027c\65\0\1\u013f\46\0"+
    "\1\u013f\67\0\2\u027d\65\0\4\u0241\5\0\6\u0241\3\0"+
    "\3\u0241\1\u027e\1\0\54\u0241\30\0\1\u027f\17\0\1\u027f"+
    "\122\0\2\241\123\0\2\u0280\71\0\1\u0281\21\0\1\u0281"+
    "\110\0\2\u0282\134\0\2\u0283\65\0\1\u0284\21\0\1\u0284"+
    "\71\0\1\u0285\46\0\1\u0285\54\0\1\u018c\21\0\1\u018c"+
    "\57\0\1\u0286\22\0\1\u0286\105\0\1\u0287\54\0\1\u0287"+
    "\67\0\2\u0288\104\0\1\u0146\55\0\1\u0146\56\0\2\127"+
    "\70\0\1\u0149\2\0\1\u0182\14\0\1\u0149\4\0\1\u0182"+
    "\75\0\1\u0289\21\0\1\u0289\57\0\1\u028a\22\0\1\u028a"+
    "\21\0\2\u014d\23\0\2\u028b\67\0\2\u01f2\65\0\1\u028c"+
    "\46\0\1\u028c\101\0\2\u028d\124\0\2\u028e\110\0\2\u028f"+
    "\124\0\2\u0290\110\0\2\u0291\52\0\11\61\1\0\32\61"+
    "\2\u0292\40\61\1\214\11\61\10\u0293\1\u0294\1\u0295\74\u0293"+
    "\1\u0296\21\u0293\1\u0294\1\u0297\74\u0293\1\u0296\11\u0293\10\u0295"+
    "\1\u0298\107\u0295\56\0\2\u0299\41\0\1\u029a\22\0\1\u029a"+
    "\112\0\1\242\21\0\1\242\110\0\2\u029b\136\0\2\u0142"+
    "\57\0\1\u029c\46\0\1\u029c\50\0\1\u029d\46\0\1\u029d"+
    "\36\0\1\354\13\0\1\355\6\0\1\354\33\0\1\355"+
    "\40\0\1\u029e\22\0\1\u029e\141\0\2\u029f\122\0\2\u02a0"+
    "\114\0\2\u02a1\64\0\1\u02a2\42\0\1\u02a2\135\0\2\u02a3"+
    "\54\0\2\u02a4\74\0\1\u02a5\46\0\1\u02a5\74\0\2\u02a6"+
    "\60\0\1\u02a7\22\0\1\u02a7\141\0\2\u02a8\107\0\2\u0166"+
    "\73\0\1\u0149\2\0\1\u018c\14\0\1\u0149\4\0\1\u018c"+
    "\155\0\2\u0109\73\0\2\u02a9\77\0\2\u028f\125\0\2\u02aa"+
    "\66\0\1\u02ab\17\0\1\u02ab\127\0\2\u0139\116\0\2\u02ac"+
    "\64\0\1\u0199\54\0\1\u0199\67\0\2\u02ad\135\0\2\u02ae"+
    "\72\0\2\u02af\123\0\2\u02b0\123\0\2\u02b1\107\0\2\u0146"+
    "\125\0\2\u02b2\111\0\2\u02b3\60\0\1\u02b4\22\0\1\u02b4"+
    "\141\0\2\u0160\63\0\1\u02a4\46\0\1\u02a4\54\0\1\255"+
    "\21\0\1\255\115\0\2\u02b5\123\0\2\241\104\0\2\u02b6"+
    "\114\0\2\u0109\134\0\2\u02b7\2\u01f1\103\0\2\u02b8\61\0"+
    "\11\61\1\0\4\61\1\u02b9\42\61\1\u02b9\24\61\1\214"+
    "\11\61\11\u02ba\1\0\74\u02ba\1\u02bb\22\u02ba\1\u0295\74\u02ba"+
    "\1\u02bb\22\u02ba\1\0\116\u02ba\1\u02bc\1\u0295\117\u02ba\1\u0295"+
    "\106\u02ba\35\0\2\u02bd\125\0\2\u02b8\120\0\2\u02be\124\0"+
    "\2\u014d\106\0\2\342\67\0\1\u02bf\42\0\1\u02bf\103\0"+
    "\2\u02c0\130\0\2\u0109\72\0\2\u02c1\130\0\2\u02c2\116\0"+
    "\2\u02c3\120\0\2\u02a7\120\0\2\u0176\112\0\2\u01d0\130\0"+
    "\2\u02c4\104\0\2\u02c5\122\0\2\u02c6\47\0\1\u02c7\22\0"+
    "\1\u02c7\135\0\2\354\70\0\1\u028f\17\0\1\u028f\100\0"+
    "\1\u02c8\42\0\1\u02c8\67\0\2\u02c9\102\0\1\u02ca\17\0"+
    "\1\u02ca\77\0\1\u0149\17\0\1\u0149\120\0\2\u028d\131\0"+
    "\2\u01fd\112\0\2\u02cb\102\0\2\u02cc\67\0\1\u0146\22\0"+
    "\1\u0146\143\0\2\u02cd\64\0\1\u0109\42\0\1\u0109\36\0"+
    "\2\61\3\u02ce\1\61\1\u02b9\1\61\1\u02b9\1\u02cf\56\61"+
    "\1\u02ce\15\61\1\214\11\61\11\u02ba\1\0\74\u02ba\1\u02d0"+
    "\22\u02ba\1\u0295\74\u02ba\1\u02d0\11\u02ba\52\0\2\u01af\63\0"+
    "\1\u02a7\21\0\1\u02a7\115\0\2\u02d1\127\0\2\u02d2\62\0"+
    "\1\u02d3\17\0\1\u02d3\122\0\2\u014c\72\0\1\u02c2\46\0"+
    "\1\u02c2\101\0\2\u02d4\71\0\1\u02d5\21\0\1\u02d5\110\0"+
    "\2\u0244\136\0\2\u02d6\134\0\1\u0109\61\0\2\u028e\65\0"+
    "\1\u024b\22\0\1\u024b\132\0\2\u02d7\72\0\1\u02d8\46\0"+
    "\1\u02d8\35\0\2\61\3\u02ce\4\61\1\0\56\61\1\u02ce"+
    "\15\61\1\u02d9\11\61\2\0\3\u02da\1\0\1\u02cf\1\0"+
    "\2\u02cf\56\0\1\u02da\77\0\2\u02db\120\0\2\u02dc\120\0"+
    "\2\u0109\112\0\2\u02dd\100\0\2\u02de\123\0\2\u02df\133\0"+
    "\2\u0146\106\0\2\u02e0\54\0\3\u02da\63\0\1\u02da\15\0"+
    "\1\u02e1\102\0\2\u0109\41\0\1\u01d0\17\0\1\u01d0\115\0"+
    "\2\u02e2\114\0\2\u0146\101\0\1\u01af\46\0\1\u01af\101\0"+
    "\2\256\111\0\2\u02e3\114\0\2\127\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\44\1\5\0\1\1\3\0\1\1"+
    "\34\0\1\1\1\0\2\1\3\0\1\11\3\0\1\11"+
    "\51\0\2\1\4\0\2\1\2\0\1\1\2\0\7\1"+
    "\34\0\1\11\1\0\3\1\24\0\1\1\32\0\1\1"+
    "\11\0\2\1\1\0\1\1\4\0\1\1\1\11\1\1"+
    "\6\0\1\1\4\0\1\11\14\0\1\1\15\0\1\1"+
    "\1\0\1\1\22\0\1\1\131\0\1\1\15\0\1\1"+
    "\16\0\1\1\41\0\1\1\26\0\1\1\25\0\1\1"+
    "\6\0\1\1\5\0\1\11\14\0\1\1\21\0\1\1"+
    "\26\0\1\1\10\0\1\1\7\0\1\1\1\0\1\1"+
    "\35\0\1\1\12\0\1\11\7\0\1\1\17\0\1\1"+
    "\44\0\1\1\11\0\1\1\3\0\1\1\6\0\1\1"+
    "\10\0\1\1\7\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[739];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int lastToken;
    private int nextState=YYINITIAL;
    
    /** 
     * next Token method that allows you to control if whitespace and comments are
     * returned as tokens.
     */
    public Token getNextToken(boolean returnComments, boolean returnWhiteSpace)throws IOException{
        Token t = getNextToken();
        while (t != null && ((!returnWhiteSpace && t.isWhiteSpace()) || (!returnComments && t.isComment()))){
            t = getNextToken();
        }
        return (t); 
    }
        
    /**
     * Prints out tokens from a file or System.in.
     * If no arguments are given, System.in will be used for input.
     * If more arguments are given, the first argument will be used as
     * the name of the file to use as input
     *
     * @param args program arguments, of which the first is a filename
     */
    public static void main(String[] args) {
        InputStream in;
        try {
            if (args.length > 0){
                File f = new File(args[0]);
                if (f.exists()){
                    if (f.canRead()){
                        in = new FileInputStream(f);
                    } else {
                        throw new IOException("Could not open " + args[0]);
                    }
                } else {
                    throw new IOException("Could not find " + args[0]);
                }
            } else {
                in = System.in;
            }
            JMugenLexer shredder = new JMugenLexer(in);
            Token t;
            while ((t = shredder.getNextToken()) != null) {
                if (t.getID() != JMugenToken.WHITE_SPACE){
                    System.out.println(t);
                }
            }
        } catch (IOException e){
            System.out.println(e.getMessage());
        }
    }  

    /**
     * Closes the current input stream, and resets the scanner to read from a new input stream.
	 * All internal variables are reset, the old input stream  cannot be reused
	 * (content of the internal buffer is discarded and lost).
	 * The lexical state is set to the initial state.
     * Subsequent tokens read from the lexer will start with the line, char, and column
     * values given here.
     *
     * @param reader The new input.
     * @param yyline The line number of the first token.
     * @param yychar The position (relative to the start of the stream) of the first token.
     * @param yycolumn The position (relative to the line) of the first token.
     * @throws IOException if an IOExecption occurs while switching readers.
     */
    public void reset(java.io.Reader reader, int yyline, int yychar, int yycolumn) throws IOException{
        yyreset(reader);
        this.yyline = yyline;
		this.yychar = yychar;
		this.yycolumn = yycolumn;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JMugenLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JMugenLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { lastToken = JMugenToken.WHITE_SPACE;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 22: break;
        case 10: 
          { lastToken = JMugenToken.SEPARATOR_RBRACKET;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 23: break;
        case 18: 
          { lastToken = JMugenToken.TYPE_STATECTRL;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 24: break;
        case 16: 
          { lastToken = JMugenToken.LEFT_KEY;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 25: break;
        case 19: 
          { lastToken = JMugenToken.CONST_SPRITE_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 26: break;
        case 5: 
          { lastToken = JMugenToken.SEPARATOR_PERIOD;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 27: break;
        case 15: 
          { lastToken = JMugenToken.SECTION;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 28: break;
        case 2: 
          { lastToken = JMugenToken.FLOAT_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 29: break;
        case 17: 
          { lastToken = JMugenToken.SPRITE_REDIRECT_REG;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 30: break;
        case 8: 
          { lastToken = JMugenToken.SEPARATOR_LPAREN;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 31: break;
        case 6: 
          { lastToken = JMugenToken.SEPARATOR_RPAREN;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 32: break;
        case 21: 
          { lastToken = JMugenToken.SECTION_STATEDEF;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 33: break;
        case 12: 
          { lastToken = JMugenToken.LITERAL_STRING;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 34: break;
        case 9: 
          { lastToken = JMugenToken.SEPARATOR_LBRACKET;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 35: break;
        case 4: 
          { lastToken = JMugenToken.COMMENT_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 36: break;
        case 14: 
          { lastToken = JMugenToken.TRIGGER_MATHS_FUNCTION_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 37: break;
        case 7: 
          { lastToken = JMugenToken.OPERATOR_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 38: break;
        case 11: 
          { lastToken = JMugenToken.SEPARATOR_COMMA;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 39: break;
        case 13: 
          { lastToken = JMugenToken.TRIGGER_FUNCTION_SPRITE_REGEX;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 40: break;
        case 20: 
          { lastToken = JMugenToken.SECTION_STATECTRL;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 41: break;
        case 1: 
          { lastToken = JMugenToken.TEXT;
    String text = yytext();
    JMugenToken t = (new JMugenToken(lastToken,text,yyline,yychar,yychar+text.length(),nextState));
    return (t);
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
